///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               17/Apr/2017  16:18:09
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control and
//        save relay state)\zigbee and
//        smartThings\Components\stack\zdo\ZDSecMgr.c
//    Command line       =  
//        -f "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control and
//        save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x1407
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control and
//        save relay state)\zigbee and
//        smartThings\Components\stack\zdo\ZDSecMgr.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xHOLD_AUTO_START -D
//        xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC
//        -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY
//        -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
//        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D HAL_UART=TRUE -D
//        HAL_LED=TRUE -D HAL_KEY=TRUE -lC
//        "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control and
//        save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o
//        "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control and
//        save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control and
//        save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control and
//        save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control
//        and save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control and
//        save relay state)\zigbee and
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\ZDSecMgr.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDSecMgr

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V3
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GE_X
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??APSME_IsDefaultTCLK::?relay`
        FUNCTION `??APSME_IsDefaultTCLK::?relay`,0203H
        PUBLIC `??APSME_IsLinkKeyValid::?relay`
        FUNCTION `??APSME_IsLinkKeyValid::?relay`,0203H
        PUBLIC `??APSME_KeyFwdToChild::?relay`
        FUNCTION `??APSME_KeyFwdToChild::?relay`,0203H
        PUBLIC `??APSME_LinkKeyNVIdGet::?relay`
        FUNCTION `??APSME_LinkKeyNVIdGet::?relay`,0203H
        PUBLIC `??APSME_LinkKeySet::?relay`
        FUNCTION `??APSME_LinkKeySet::?relay`,0203H
        PUBLIC `??APSME_TCLinkKeyInit::?relay`
        FUNCTION `??APSME_TCLinkKeyInit::?relay`,0203H
        PUBLIC `??APSME_TCLinkKeyLoad::?relay`
        FUNCTION `??APSME_TCLinkKeyLoad::?relay`,0203H
        PUBLIC `??APSME_TCLinkKeySync::?relay`
        FUNCTION `??APSME_TCLinkKeySync::?relay`,0203H
        PUBLIC `??ZDSecMgrAPSRemove::?relay`
        FUNCTION `??ZDSecMgrAPSRemove::?relay`,0203H
        PUBLIC `??ZDSecMgrAddLinkKey::?relay`
        FUNCTION `??ZDSecMgrAddLinkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,0203H
        PUBLIC `??ZDSecMgrAddrStore::?relay`
        FUNCTION `??ZDSecMgrAddrStore::?relay`,0203H
        PUBLIC `??ZDSecMgrAppKeyGet::?relay`
        FUNCTION `??ZDSecMgrAppKeyGet::?relay`,0203H
        PUBLIC `??ZDSecMgrAppKeyReq::?relay`
        FUNCTION `??ZDSecMgrAppKeyReq::?relay`,0203H
        PUBLIC `??ZDSecMgrAppKeyTypeSet::?relay`
        FUNCTION `??ZDSecMgrAppKeyTypeSet::?relay`,0203H
        PUBLIC `??ZDSecMgrApsLinkKeyInit::?relay`
        FUNCTION `??ZDSecMgrApsLinkKeyInit::?relay`,0203H
        PUBLIC `??ZDSecMgrAssocDeviceAuth::?relay`
        FUNCTION `??ZDSecMgrAssocDeviceAuth::?relay`,0203H
        PUBLIC `??ZDSecMgrAuthNwkKey::?relay`
        FUNCTION `??ZDSecMgrAuthNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrAuthenticationCheck::?relay`
        FUNCTION `??ZDSecMgrAuthenticationCheck::?relay`,0203H
        PUBLIC `??ZDSecMgrAuthenticationSet::?relay`
        FUNCTION `??ZDSecMgrAuthenticationSet::?relay`,0203H
        PUBLIC `??ZDSecMgrClearNVKeyValues::?relay`
        FUNCTION `??ZDSecMgrClearNVKeyValues::?relay`,0203H
        PUBLIC `??ZDSecMgrConfig::?relay`
        FUNCTION `??ZDSecMgrConfig::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceJoin::?relay`
        FUNCTION `??ZDSecMgrDeviceJoin::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceJoinDirect::?relay`
        FUNCTION `??ZDSecMgrDeviceJoinDirect::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceJoinFwd::?relay`
        FUNCTION `??ZDSecMgrDeviceJoinFwd::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceNew::?relay`
        FUNCTION `??ZDSecMgrDeviceNew::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceRemove::?relay`
        FUNCTION `??ZDSecMgrDeviceRemove::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceValidate::?relay`
        FUNCTION `??ZDSecMgrDeviceValidate::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceValidateRM::?relay`
        FUNCTION `??ZDSecMgrDeviceValidateRM::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryFree::?relay`
        FUNCTION `??ZDSecMgrEntryFree::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryInit::?relay`
        FUNCTION `??ZDSecMgrEntryInit::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookup::?relay`
        FUNCTION `??ZDSecMgrEntryLookup::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupAMI::?relay`
        FUNCTION `??ZDSecMgrEntryLookupAMI::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupAMIGetIndex::?relay`
        FUNCTION `??ZDSecMgrEntryLookupAMIGetIndex::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupExt::?relay`
        FUNCTION `??ZDSecMgrEntryLookupExt::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupExtGetIndex::?relay`
        FUNCTION `??ZDSecMgrEntryLookupExtGetIndex::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryNew::?relay`
        FUNCTION `??ZDSecMgrEntryNew::?relay`,0203H
        PUBLIC `??ZDSecMgrExtAddrLookup::?relay`
        FUNCTION `??ZDSecMgrExtAddrLookup::?relay`,0203H
        PUBLIC `??ZDSecMgrExtAddrStore::?relay`
        FUNCTION `??ZDSecMgrExtAddrStore::?relay`,0203H
        PUBLIC `??ZDSecMgrInit::?relay`
        FUNCTION `??ZDSecMgrInit::?relay`,0203H
        PUBLIC `??ZDSecMgrInitNV::?relay`
        FUNCTION `??ZDSecMgrInitNV::?relay`,0203H
        PUBLIC `??ZDSecMgrInitNVKeyTables::?relay`
        FUNCTION `??ZDSecMgrInitNVKeyTables::?relay`,0203H
        PUBLIC `??ZDSecMgrNewDeviceEvent::?relay`
        FUNCTION `??ZDSecMgrNewDeviceEvent::?relay`,0203H
        PUBLIC `??ZDSecMgrNwkKeyInit::?relay`
        FUNCTION `??ZDSecMgrNwkKeyInit::?relay`,0203H
        PUBLIC `??ZDSecMgrPermitJoining::?relay`
        FUNCTION `??ZDSecMgrPermitJoining::?relay`,0203H
        PUBLIC `??ZDSecMgrPermitJoiningTimeout::?relay`
        FUNCTION `??ZDSecMgrPermitJoiningTimeout::?relay`,0203H
        PUBLIC `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,0203H
        PUBLIC `??ZDSecMgrRemoveDeviceInd::?relay`
        FUNCTION `??ZDSecMgrRemoveDeviceInd::?relay`,0203H
        PUBLIC `??ZDSecMgrRequestAppKey::?relay`
        FUNCTION `??ZDSecMgrRequestAppKey::?relay`,0203H
        PUBLIC `??ZDSecMgrRequestKeyInd::?relay`
        FUNCTION `??ZDSecMgrRequestKeyInd::?relay`,0203H
        FUNCTION `??ZDSecMgrRestoreFromNV::?relay`,0203H
        PUBLIC `??ZDSecMgrSaveApsLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveApsLinkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrSaveTCLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveTCLinkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrSendNwkKey::?relay`
        FUNCTION `??ZDSecMgrSendNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrSetDefaultNV::?relay`
        FUNCTION `??ZDSecMgrSetDefaultNV::?relay`,0203H
        PUBLIC `??ZDSecMgrSwitchKeyInd::?relay`
        FUNCTION `??ZDSecMgrSwitchKeyInd::?relay`,0203H
        PUBLIC `??ZDSecMgrSwitchNwkKey::?relay`
        FUNCTION `??ZDSecMgrSwitchNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrTCDataLoad::?relay`
        FUNCTION `??ZDSecMgrTCDataLoad::?relay`,0203H
        PUBLIC `??ZDSecMgrTCExtAddrCheck::?relay`
        FUNCTION `??ZDSecMgrTCExtAddrCheck::?relay`,0203H
        PUBLIC `??ZDSecMgrTransportKeyInd::?relay`
        FUNCTION `??ZDSecMgrTransportKeyInd::?relay`,0203H
        PUBLIC `??ZDSecMgrUpdateDeviceInd::?relay`
        FUNCTION `??ZDSecMgrUpdateDeviceInd::?relay`,0203H
        PUBLIC `??ZDSecMgrUpdateNwkKey::?relay`
        FUNCTION `??ZDSecMgrUpdateNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrUpdateTCAddress::?relay`
        FUNCTION `??ZDSecMgrUpdateTCAddress::?relay`,0203H
        FUNCTION `??ZDSecMgrWriteNV::?relay`,0203H
        PUBLIC APSME_IsDefaultTCLK
        FUNCTION APSME_IsDefaultTCLK,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC APSME_IsLinkKeyValid
        FUNCTION APSME_IsLinkKeyValid,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC APSME_KeyFwdToChild
        FUNCTION APSME_KeyFwdToChild,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC APSME_LinkKeyNVIdGet
        FUNCTION APSME_LinkKeyNVIdGet,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_LinkKeySet
        FUNCTION APSME_LinkKeySet,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC APSME_TCLinkKeyInit
        FUNCTION APSME_TCLinkKeyInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 48, STACK
        PUBLIC APSME_TCLinkKeyLoad
        FUNCTION APSME_TCLinkKeyLoad,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        PUBLIC APSME_TCLinkKeySync
        FUNCTION APSME_TCLinkKeySync,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ApsLinkKeyFrmCntr
        PUBLIC TCLinkKeyFrmCntr
        PUBLIC TrustCenterLinkKey
        PUBLIC ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrAddLinkKey
        FUNCTION ZDSecMgrAddLinkKey,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrAddrStore
        FUNCTION ZDSecMgrAddrStore,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAppKeyGet
        FUNCTION ZDSecMgrAppKeyGet,021203H
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrAppKeyReq
        FUNCTION ZDSecMgrAppKeyReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 59, STACK
        PUBLIC ZDSecMgrAppKeyType
        PUBLIC ZDSecMgrAppKeyTypeSet
        FUNCTION ZDSecMgrAppKeyTypeSet,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrApsLinkKeyInit
        FUNCTION ZDSecMgrApsLinkKeyInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 36, STACK
        PUBLIC ZDSecMgrAssocDeviceAuth
        FUNCTION ZDSecMgrAssocDeviceAuth,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthNwkKey
        FUNCTION ZDSecMgrAuthNwkKey,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticationCheck
        FUNCTION ZDSecMgrAuthenticationCheck,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAuthenticationSet
        FUNCTION ZDSecMgrAuthenticationSet,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrClearNVKeyValues
        FUNCTION ZDSecMgrClearNVKeyValues,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceJoin
        FUNCTION ZDSecMgrDeviceJoin,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrDeviceJoinDirect
        FUNCTION ZDSecMgrDeviceJoinDirect,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceJoinFwd
        FUNCTION ZDSecMgrDeviceJoinFwd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrDeviceNew
        FUNCTION ZDSecMgrDeviceNew,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceRemove
        FUNCTION ZDSecMgrDeviceRemove,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrDeviceValidate
        FUNCTION ZDSecMgrDeviceValidate,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidateRM
        FUNCTION ZDSecMgrDeviceValidateRM,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntries
        PUBLIC ZDSecMgrEntryFree
        FUNCTION ZDSecMgrEntryFree,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrEntryInit
        FUNCTION ZDSecMgrEntryInit,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookup
        FUNCTION ZDSecMgrEntryLookup,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrEntryLookupAMI
        FUNCTION ZDSecMgrEntryLookupAMI,080203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookupAMIGetIndex
        FUNCTION ZDSecMgrEntryLookupAMIGetIndex,080203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookupExt
        FUNCTION ZDSecMgrEntryLookupExt,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryLookupExtGetIndex
        FUNCTION ZDSecMgrEntryLookupExtGetIndex,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryNew
        FUNCTION ZDSecMgrEntryNew,080203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrExtAddrLookup
        FUNCTION ZDSecMgrExtAddrLookup,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrExtAddrStore
        FUNCTION ZDSecMgrExtAddrStore,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrInitNV
        FUNCTION ZDSecMgrInitNV,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrInitNVKeyTables
        FUNCTION ZDSecMgrInitNVKeyTables,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrNwkKeyInit
        FUNCTION ZDSecMgrNwkKeyInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDSecMgrPermitJoining
        FUNCTION ZDSecMgrPermitJoining,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrPermitJoiningEnabled
        PUBLIC ZDSecMgrPermitJoiningTimed
        PUBLIC ZDSecMgrPermitJoiningTimeout
        FUNCTION ZDSecMgrPermitJoiningTimeout,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrRemoveDeviceInd
        FUNCTION ZDSecMgrRemoveDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZDSecMgrRestoreFromNV,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrSaveApsLinkKey
        FUNCTION ZDSecMgrSaveApsLinkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrSendNwkKey
        FUNCTION ZDSecMgrSendNwkKey,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 50, STACK
        PUBLIC ZDSecMgrSetDefaultNV
        FUNCTION ZDSecMgrSetDefaultNV,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrSwitchNwkKey
        FUNCTION ZDSecMgrSwitchNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDSecMgrTCAuthenticated
        PUBLIC ZDSecMgrTCDataLoad
        FUNCTION ZDSecMgrTCDataLoad,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDSecMgrTCExtAddr
        PUBLIC ZDSecMgrTCExtAddrCheck
        FUNCTION ZDSecMgrTCExtAddrCheck,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrUpdateNwkKey
        FUNCTION ZDSecMgrUpdateNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC ZDSecMgrUpdateTCAddress
        FUNCTION ZDSecMgrUpdateTCAddress,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        FUNCTION ZDSecMgrWriteNV,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBWEAK __Constant_1
        PUBWEAK __Constant_3e9
        PUBWEAK __Constant_a
        PUBWEAK __Constant_b
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_GetRequest    SYMBOL "APSME_GetRequest"
`??APSME_GetRequest::?relay` SYMBOL "?relay", APSME_GetRequest
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
`??APSME_LookupExtAddr::?relay` SYMBOL "?relay", APSME_LookupExtAddr
APSME_LookupNwkAddr SYMBOL "APSME_LookupNwkAddr"
`??APSME_LookupNwkAddr::?relay` SYMBOL "?relay", APSME_LookupNwkAddr
APSME_RemoveDeviceReq SYMBOL "APSME_RemoveDeviceReq"
`??APSME_RemoveDeviceReq::?relay` SYMBOL "?relay", APSME_RemoveDeviceReq
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
`??APSME_RequestKeyReq::?relay` SYMBOL "?relay", APSME_RequestKeyReq
APSME_SecurityCM_CD SYMBOL "APSME_SecurityCM_CD"
`??APSME_SecurityCM_CD::?relay` SYMBOL "?relay", APSME_SecurityCM_CD
APSME_SetRequest    SYMBOL "APSME_SetRequest"
`??APSME_SetRequest::?relay` SYMBOL "?relay", APSME_SetRequest
APSME_SwitchKeyReq  SYMBOL "APSME_SwitchKeyReq"
`??APSME_SwitchKeyReq::?relay` SYMBOL "?relay", APSME_SwitchKeyReq
APSME_TransportKeyReq SYMBOL "APSME_TransportKeyReq"
`??APSME_TransportKeyReq::?relay` SYMBOL "?relay", APSME_TransportKeyReq
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
`??APSME_UpdateDeviceReq::?relay` SYMBOL "?relay", APSME_UpdateDeviceReq
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
`??AddrMgrEntryGet::?relay` SYMBOL "?relay", AddrMgrEntryGet
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrEqual SYMBOL "AddrMgrExtAddrEqual"
`??AddrMgrExtAddrEqual::?relay` SYMBOL "?relay", AddrMgrExtAddrEqual
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
`??AddrMgrExtAddrLookup::?relay` SYMBOL "?relay", AddrMgrExtAddrLookup
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
`??AddrMgrExtAddrValid::?relay` SYMBOL "?relay", AddrMgrExtAddrValid
AssocGetWithExt     SYMBOL "AssocGetWithExt"
`??AssocGetWithExt::?relay` SYMBOL "?relay", AssocGetWithExt
AssocGetWithShort   SYMBOL "AssocGetWithShort"
`??AssocGetWithShort::?relay` SYMBOL "?relay", AssocGetWithShort
AssocRemove         SYMBOL "AssocRemove"
`??AssocRemove::?relay` SYMBOL "?relay", AssocRemove
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_ReadNwkKeyInfo SYMBOL "NLME_ReadNwkKeyInfo"
`??NLME_ReadNwkKeyInfo::?relay` SYMBOL "?relay", NLME_ReadNwkKeyInfo
SSP_GetTrueRand     SYMBOL "SSP_GetTrueRand"
`??SSP_GetTrueRand::?relay` SYMBOL "?relay", SSP_GetTrueRand
SSP_Init            SYMBOL "SSP_Init"
`??SSP_Init::?relay` SYMBOL "?relay", SSP_Init
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
`??SSP_SwitchNwkKey::?relay` SYMBOL "?relay", SSP_SwitchNwkKey
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
`??SSP_UpdateNwkKey::?relay` SYMBOL "?relay", SSP_UpdateNwkKey
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
`??ZDP_NwkAddrReq::?relay` SYMBOL "?relay", ZDP_NwkAddrReq
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
APSME_IsDefaultTCLK SYMBOL "APSME_IsDefaultTCLK"
`??APSME_IsDefaultTCLK::?relay` SYMBOL "?relay", APSME_IsDefaultTCLK
APSME_IsLinkKeyValid SYMBOL "APSME_IsLinkKeyValid"
`??APSME_IsLinkKeyValid::?relay` SYMBOL "?relay", APSME_IsLinkKeyValid
APSME_KeyFwdToChild SYMBOL "APSME_KeyFwdToChild"
`??APSME_KeyFwdToChild::?relay` SYMBOL "?relay", APSME_KeyFwdToChild
APSME_LinkKeyNVIdGet SYMBOL "APSME_LinkKeyNVIdGet"
`??APSME_LinkKeyNVIdGet::?relay` SYMBOL "?relay", APSME_LinkKeyNVIdGet
APSME_LinkKeySet    SYMBOL "APSME_LinkKeySet"
`??APSME_LinkKeySet::?relay` SYMBOL "?relay", APSME_LinkKeySet
APSME_TCLinkKeyInit SYMBOL "APSME_TCLinkKeyInit"
`??APSME_TCLinkKeyInit::?relay` SYMBOL "?relay", APSME_TCLinkKeyInit
APSME_TCLinkKeyLoad SYMBOL "APSME_TCLinkKeyLoad"
`??APSME_TCLinkKeyLoad::?relay` SYMBOL "?relay", APSME_TCLinkKeyLoad
APSME_TCLinkKeySync SYMBOL "APSME_TCLinkKeySync"
`??APSME_TCLinkKeySync::?relay` SYMBOL "?relay", APSME_TCLinkKeySync
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
`??ZDSecMgrAPSRemove::?relay` SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddLinkKey  SYMBOL "ZDSecMgrAddLinkKey"
`??ZDSecMgrAddLinkKey::?relay` SYMBOL "?relay", ZDSecMgrAddLinkKey
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrAddrStore   SYMBOL "ZDSecMgrAddrStore"
`??ZDSecMgrAddrStore::?relay` SYMBOL "?relay", ZDSecMgrAddrStore
ZDSecMgrAppKeyGet   SYMBOL "ZDSecMgrAppKeyGet"
`??ZDSecMgrAppKeyGet::?relay` SYMBOL "?relay", ZDSecMgrAppKeyGet
ZDSecMgrAppKeyReq   SYMBOL "ZDSecMgrAppKeyReq"
`??ZDSecMgrAppKeyReq::?relay` SYMBOL "?relay", ZDSecMgrAppKeyReq
ZDSecMgrAppKeyTypeSet SYMBOL "ZDSecMgrAppKeyTypeSet"
`??ZDSecMgrAppKeyTypeSet::?relay` SYMBOL "?relay", ZDSecMgrAppKeyTypeSet
ZDSecMgrApsLinkKeyInit SYMBOL "ZDSecMgrApsLinkKeyInit"
`??ZDSecMgrApsLinkKeyInit::?relay` SYMBOL "?relay", ZDSecMgrApsLinkKeyInit
ZDSecMgrAssocDeviceAuth SYMBOL "ZDSecMgrAssocDeviceAuth"
`??ZDSecMgrAssocDeviceAuth::?relay` SYMBOL "?relay", ZDSecMgrAssocDeviceAuth
ZDSecMgrAuthNwkKey  SYMBOL "ZDSecMgrAuthNwkKey"
`??ZDSecMgrAuthNwkKey::?relay` SYMBOL "?relay", ZDSecMgrAuthNwkKey
ZDSecMgrAuthenticationCheck SYMBOL "ZDSecMgrAuthenticationCheck"
`??ZDSecMgrAuthenticationCheck::?relay` SYMBOL "?relay", ZDSecMgrAuthenticationCheck
ZDSecMgrAuthenticationSet SYMBOL "ZDSecMgrAuthenticationSet"
`??ZDSecMgrAuthenticationSet::?relay` SYMBOL "?relay", ZDSecMgrAuthenticationSet
ZDSecMgrClearNVKeyValues SYMBOL "ZDSecMgrClearNVKeyValues"
`??ZDSecMgrClearNVKeyValues::?relay` SYMBOL "?relay", ZDSecMgrClearNVKeyValues
ZDSecMgrConfig      SYMBOL "ZDSecMgrConfig"
`??ZDSecMgrConfig::?relay` SYMBOL "?relay", ZDSecMgrConfig
ZDSecMgrDeviceJoin  SYMBOL "ZDSecMgrDeviceJoin"
`??ZDSecMgrDeviceJoin::?relay` SYMBOL "?relay", ZDSecMgrDeviceJoin
ZDSecMgrDeviceJoinDirect SYMBOL "ZDSecMgrDeviceJoinDirect"
`??ZDSecMgrDeviceJoinDirect::?relay` SYMBOL "?relay", ZDSecMgrDeviceJoinDirect
ZDSecMgrDeviceJoinFwd SYMBOL "ZDSecMgrDeviceJoinFwd"
`??ZDSecMgrDeviceJoinFwd::?relay` SYMBOL "?relay", ZDSecMgrDeviceJoinFwd
ZDSecMgrDeviceNew   SYMBOL "ZDSecMgrDeviceNew"
`??ZDSecMgrDeviceNew::?relay` SYMBOL "?relay", ZDSecMgrDeviceNew
ZDSecMgrDeviceRemove SYMBOL "ZDSecMgrDeviceRemove"
`??ZDSecMgrDeviceRemove::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemove
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrDeviceValidate SYMBOL "ZDSecMgrDeviceValidate"
`??ZDSecMgrDeviceValidate::?relay` SYMBOL "?relay", ZDSecMgrDeviceValidate
ZDSecMgrDeviceValidateRM SYMBOL "ZDSecMgrDeviceValidateRM"
`??ZDSecMgrDeviceValidateRM::?relay` SYMBOL "?relay", ZDSecMgrDeviceValidateRM
ZDSecMgrEntryFree   SYMBOL "ZDSecMgrEntryFree"
`??ZDSecMgrEntryFree::?relay` SYMBOL "?relay", ZDSecMgrEntryFree
ZDSecMgrEntryInit   SYMBOL "ZDSecMgrEntryInit"
`??ZDSecMgrEntryInit::?relay` SYMBOL "?relay", ZDSecMgrEntryInit
ZDSecMgrEntryLookup SYMBOL "ZDSecMgrEntryLookup"
`??ZDSecMgrEntryLookup::?relay` SYMBOL "?relay", ZDSecMgrEntryLookup
ZDSecMgrEntryLookupAMI SYMBOL "ZDSecMgrEntryLookupAMI"
`??ZDSecMgrEntryLookupAMI::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupAMI
ZDSecMgrEntryLookupAMIGetIndex SYMBOL "ZDSecMgrEntryLookupAMIGetIndex"
`??ZDSecMgrEntryLookupAMIGetIndex::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupAMIGetIndex
ZDSecMgrEntryLookupExt SYMBOL "ZDSecMgrEntryLookupExt"
`??ZDSecMgrEntryLookupExt::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupExt
ZDSecMgrEntryLookupExtGetIndex SYMBOL "ZDSecMgrEntryLookupExtGetIndex"
`??ZDSecMgrEntryLookupExtGetIndex::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupExtGetIndex
ZDSecMgrEntryNew    SYMBOL "ZDSecMgrEntryNew"
`??ZDSecMgrEntryNew::?relay` SYMBOL "?relay", ZDSecMgrEntryNew
ZDSecMgrExtAddrLookup SYMBOL "ZDSecMgrExtAddrLookup"
`??ZDSecMgrExtAddrLookup::?relay` SYMBOL "?relay", ZDSecMgrExtAddrLookup
ZDSecMgrExtAddrStore SYMBOL "ZDSecMgrExtAddrStore"
`??ZDSecMgrExtAddrStore::?relay` SYMBOL "?relay", ZDSecMgrExtAddrStore
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
`??ZDSecMgrInit::?relay` SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrInitNV      SYMBOL "ZDSecMgrInitNV"
`??ZDSecMgrInitNV::?relay` SYMBOL "?relay", ZDSecMgrInitNV
ZDSecMgrInitNVKeyTables SYMBOL "ZDSecMgrInitNVKeyTables"
`??ZDSecMgrInitNVKeyTables::?relay` SYMBOL "?relay", ZDSecMgrInitNVKeyTables
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
`??ZDSecMgrNewDeviceEvent::?relay` SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrNwkKeyInit  SYMBOL "ZDSecMgrNwkKeyInit"
`??ZDSecMgrNwkKeyInit::?relay` SYMBOL "?relay", ZDSecMgrNwkKeyInit
ZDSecMgrPermitJoining SYMBOL "ZDSecMgrPermitJoining"
`??ZDSecMgrPermitJoining::?relay` SYMBOL "?relay", ZDSecMgrPermitJoining
ZDSecMgrPermitJoiningTimeout SYMBOL "ZDSecMgrPermitJoiningTimeout"
`??ZDSecMgrPermitJoiningTimeout::?relay` SYMBOL "?relay", ZDSecMgrPermitJoiningTimeout
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrRemoveDeviceInd SYMBOL "ZDSecMgrRemoveDeviceInd"
`??ZDSecMgrRemoveDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrRemoveDeviceInd
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
`??ZDSecMgrRequestAppKey::?relay` SYMBOL "?relay", ZDSecMgrRequestAppKey
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
`??ZDSecMgrRequestKeyInd::?relay` SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrSaveApsLinkKey SYMBOL "ZDSecMgrSaveApsLinkKey"
`??ZDSecMgrSaveApsLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveApsLinkKey
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
`??ZDSecMgrSaveTCLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrSendNwkKey  SYMBOL "ZDSecMgrSendNwkKey"
`??ZDSecMgrSendNwkKey::?relay` SYMBOL "?relay", ZDSecMgrSendNwkKey
ZDSecMgrSetDefaultNV SYMBOL "ZDSecMgrSetDefaultNV"
`??ZDSecMgrSetDefaultNV::?relay` SYMBOL "?relay", ZDSecMgrSetDefaultNV
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
`??ZDSecMgrSwitchKeyInd::?relay` SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrSwitchNwkKey SYMBOL "ZDSecMgrSwitchNwkKey"
`??ZDSecMgrSwitchNwkKey::?relay` SYMBOL "?relay", ZDSecMgrSwitchNwkKey
ZDSecMgrTCDataLoad  SYMBOL "ZDSecMgrTCDataLoad"
`??ZDSecMgrTCDataLoad::?relay` SYMBOL "?relay", ZDSecMgrTCDataLoad
ZDSecMgrTCExtAddrCheck SYMBOL "ZDSecMgrTCExtAddrCheck"
`??ZDSecMgrTCExtAddrCheck::?relay` SYMBOL "?relay", ZDSecMgrTCExtAddrCheck
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
`??ZDSecMgrTransportKeyInd::?relay` SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
`??ZDSecMgrUpdateDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
ZDSecMgrUpdateNwkKey SYMBOL "ZDSecMgrUpdateNwkKey"
`??ZDSecMgrUpdateNwkKey::?relay` SYMBOL "?relay", ZDSecMgrUpdateNwkKey
ZDSecMgrUpdateTCAddress SYMBOL "ZDSecMgrUpdateTCAddress"
`??ZDSecMgrUpdateTCAddress::?relay` SYMBOL "?relay", ZDSecMgrUpdateTCAddress

        EXTERN `??APSME_GetRequest::?relay`
        FUNCTION `??APSME_GetRequest::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_LookupExtAddr::?relay`
        FUNCTION `??APSME_LookupExtAddr::?relay`,00H
        EXTERN `??APSME_LookupNwkAddr::?relay`
        FUNCTION `??APSME_LookupNwkAddr::?relay`,00H
        EXTERN `??APSME_RemoveDeviceReq::?relay`
        FUNCTION `??APSME_RemoveDeviceReq::?relay`,00H
        EXTERN `??APSME_RequestKeyReq::?relay`
        FUNCTION `??APSME_RequestKeyReq::?relay`,00H
        EXTERN `??APSME_SecurityCM_CD::?relay`
        FUNCTION `??APSME_SecurityCM_CD::?relay`,00H
        EXTERN `??APSME_SetRequest::?relay`
        FUNCTION `??APSME_SetRequest::?relay`,00H
        EXTERN `??APSME_SwitchKeyReq::?relay`
        FUNCTION `??APSME_SwitchKeyReq::?relay`,00H
        EXTERN `??APSME_TransportKeyReq::?relay`
        FUNCTION `??APSME_TransportKeyReq::?relay`,00H
        EXTERN `??APSME_UpdateDeviceReq::?relay`
        FUNCTION `??APSME_UpdateDeviceReq::?relay`,00H
        EXTERN `??AddrMgrEntryGet::?relay`
        FUNCTION `??AddrMgrEntryGet::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrEqual::?relay`
        FUNCTION `??AddrMgrExtAddrEqual::?relay`,00H
        EXTERN `??AddrMgrExtAddrLookup::?relay`
        FUNCTION `??AddrMgrExtAddrLookup::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??AddrMgrExtAddrValid::?relay`
        FUNCTION `??AddrMgrExtAddrValid::?relay`,00H
        EXTERN `??AssocGetWithExt::?relay`
        FUNCTION `??AssocGetWithExt::?relay`,00H
        EXTERN `??AssocGetWithShort::?relay`
        FUNCTION `??AssocGetWithShort::?relay`,00H
        EXTERN `??AssocRemove::?relay`
        FUNCTION `??AssocRemove::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_ReadNwkKeyInfo::?relay`
        FUNCTION `??NLME_ReadNwkKeyInfo::?relay`,00H
        EXTERN `??SSP_GetTrueRand::?relay`
        FUNCTION `??SSP_GetTrueRand::?relay`,00H
        EXTERN `??SSP_Init::?relay`
        FUNCTION `??SSP_Init::?relay`,00H
        EXTERN `??SSP_SwitchNwkKey::?relay`
        FUNCTION `??SSP_SwitchNwkKey::?relay`,00H
        EXTERN `??SSP_UpdateNwkKey::?relay`
        FUNCTION `??SSP_UpdateNwkKey::?relay`,00H
        EXTERN `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,00H
        EXTERN `??ZDP_NwkAddrReq::?relay`
        FUNCTION `??ZDP_NwkAddrReq::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN APSME_GetRequest
        FUNCTION APSME_GetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupNwkAddr
        FUNCTION APSME_LookupNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RemoveDeviceReq
        FUNCTION APSME_RemoveDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SecurityCM_CD
        FUNCTION APSME_SecurityCM_CD,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SetRequest
        FUNCTION APSME_SetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SwitchKeyReq
        FUNCTION APSME_SwitchKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_TransportKeyReq
        FUNCTION APSME_TransportKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrEqual
        FUNCTION AddrMgrExtAddrEqual,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocRemove
        FUNCTION AssocRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReadNwkKeyInfo
        FUNCTION NLME_ReadNwkKeyInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_GetTrueRand
        FUNCTION SSP_GetTrueRand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_Init
        FUNCTION SSP_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDAppTaskID
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN defaultTCLinkKey
        EXTERN devState
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdoCBFunc
        EXTERN zgApsLinkKeyType
        EXTERN zgApsTrustCenterAddr
        EXTERN zgPreConfigKeys
        EXTERN zgSecurePermitJoin
        EXTERN zgUseDefaultTCLK

// C:\Users\Wiki\Desktop\20_1_2017_zigbee and smartThings(control and save relay state)\zigbee and smartThings\Components\stack\zdo\ZDSecMgr.c
//    1 /******************************************************************************
//    2   Filename:       ZDSecMgr.c
//    3   Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
//    4   Revision:       $Revision: 38833 $
//    5 
//    6   Description:    The ZigBee Device Security Manager.
//    7 
//    8 
//    9   Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComDef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "ZGlobals.h"
//   52 #include "ssp.h"
//   53 #include "nwk_globals.h"
//   54 #include "nwk.h"
//   55 #include "NLMEDE.h"
//   56 #include "AddrMgr.h"
//   57 #include "AssocList.h"
//   58 #include "APSMEDE.h"
//   59 #include "ZDConfig.h"
//   60 #include "ZDSecMgr.h"
//   61 
//   62 /******************************************************************************
//   63  * CONSTANTS
//   64  */
//   65 // maximum number of devices managed by this Security Manager
//   66 #if !defined ( ZDSECMGR_DEVICE_MAX )
//   67   #define ZDSECMGR_DEVICE_MAX 3
//   68 #endif
//   69 
//   70 // maximum number of LINK keys this device may store
//   71 #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
//   72 
//   73 // total number of stored devices
//   74 #if !defined ( ZDSECMGR_STORED_DEVICES )
//   75   #define ZDSECMGR_STORED_DEVICES 3
//   76 #endif
//   77 
//   78 // Total number of preconfigured trust center link key
//   79 #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
//   80   #define ZDSECMGR_TC_DEVICE_MAX 1
//   81 #endif
//   82 
//   83 #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
//   84   #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
//   85 #endif
//   86 
//   87 // APSME Stub Implementations
//   88 #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
//   89 #define ZDSecMgrLinkKeyNVIdGet APSME_LinkKeyNVIdGet
//   90 #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
//   91 #define ZDSecMgrIsLinkKeyValid APSME_IsLinkKeyValid
//   92 
//   93 /******************************************************************************
//   94  * TYPEDEFS
//   95  */
//   96 typedef struct
//   97 {
//   98   uint16            ami;
//   99   uint16            keyNvId;   // index to the Link Key table in NV
//  100   ZDSecMgr_Authentication_Option authenticateOption;
//  101 } ZDSecMgrEntry_t;
//  102 
//  103 typedef struct
//  104 {
//  105   uint16          nwkAddr;
//  106   uint8*          extAddr;
//  107   uint16          parentAddr;
//  108   uint8           secure;
//  109   uint8           devStatus;
//  110 } ZDSecMgrDevice_t;
//  111 
//  112 /******************************************************************************
//  113  * EXTERNAL VARIABLES
//  114  */
//  115 extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
//  116 
//  117 /******************************************************************************
//  118  * LOCAL VARIABLES
//  119  */
//  120 #if 0 // Taken out because the following functionality is only used for test
//  121       // purpose. A more efficient (above) way is used. It can be put
//  122       // back in if customers request for a white/black list feature.
//  123 uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
//  124 {
//  125   { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  126   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
//  127   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  128 };
//  129 #endif
//  130 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
ZDSecMgrTCExtAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  132   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//  133 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 uint8 ZDSecMgrTCAuthenticated = FALSE;
ZDSecMgrTCAuthenticated:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  135 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  136 ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
ZDSecMgrEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  137 
//  138 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
//  139 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 uint8 ZDSecMgrPermitJoiningEnabled;
ZDSecMgrPermitJoiningEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 uint8 ZDSecMgrPermitJoiningTimed;
ZDSecMgrPermitJoiningTimed:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 APSME_TCLinkKey_t TrustCenterLinkKey;
TrustCenterLinkKey:
        DS 32
        REQUIRE __INIT_XDATA_Z
//  144 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
ApsLinkKeyFrmCntr:
        DS 27
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
TCLinkKeyFrmCntr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  147 
//  148 /******************************************************************************
//  149  * PRIVATE FUNCTIONS
//  150  *
//  151  *   ZDSecMgrAddrStore
//  152  *   ZDSecMgrExtAddrStore
//  153  *   ZDSecMgrExtAddrLookup
//  154  *   ZDSecMgrEntryInit
//  155  *   ZDSecMgrEntryLookup
//  156  *   ZDSecMgrEntryLookupAMI
//  157  *   ZDSecMgrEntryLookupExt
//  158  *   ZDSecMgrEntryLookupExtGetIndex
//  159  *   ZDSecMgrEntryFree
//  160  *   ZDSecMgrEntryNew
//  161  *   ZDSecMgrAppKeyGet
//  162  *   ZDSecMgrAppKeyReq
//  163  *   ZDSecMgrSendNwkKey
//  164  *   ZDSecMgrDeviceRemove
//  165  *   ZDSecMgrDeviceValidateRM
//  166  *   ZDSecMgrDeviceValidate
//  167  *   ZDSecMgrDeviceJoin
//  168  *   ZDSecMgrDeviceJoinDirect
//  169  *   ZDSecMgrDeviceJoinFwd
//  170  *   ZDSecMgrDeviceNew
//  171  *   ZDSecMgrAssocDeviceAuth
//  172  *   ZDSecMgrAuthNwkKey
//  173  *   APSME_TCLinkKeyInit
//  174  *   APSME_IsDefaultTCLK
//  175  */
//  176 
//  177 //-----------------------------------------------------------------------------
//  178 // address management
//  179 //-----------------------------------------------------------------------------
//  180 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  181 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  182 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
//  183 
//  184 //-----------------------------------------------------------------------------
//  185 // Trust Center management
//  186 //-----------------------------------------------------------------------------
//  187 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
//  188 void ZDSecMgrTCDataLoad( uint8* extAddr );
//  189 
//  190 //-----------------------------------------------------------------------------
//  191 // entry data
//  192 //-----------------------------------------------------------------------------
//  193 void ZDSecMgrEntryInit(uint8 state);
//  194 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
//  195 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
//  196 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  197 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
//  198 ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
//  199 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
//  200 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
//  201 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
//  202 void ZDSecMgrApsLinkKeyInit(void);
//  203 #if defined ( NV_RESTORE )
//  204 static void ZDSecMgrWriteNV(void);
//  205 static void ZDSecMgrRestoreFromNV(void);
//  206 static void ZDSecMgrUpdateNV( uint16 index );
//  207 #endif
//  208 
//  209 //-----------------------------------------------------------------------------
//  210 // key support
//  211 //-----------------------------------------------------------------------------
//  212 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
//  213                              uint8*  initExtAddr,
//  214                              uint16  partNwkAddr,
//  215                              uint8*  partExtAddr,
//  216                              uint8** key,
//  217                              uint8*  keyType );
//  218 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
//  219 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
//  220 void ZDSecMgrNwkKeyInit(uint8 setDefault);
//  221 
//  222 //-----------------------------------------------------------------------------
//  223 // device management
//  224 //-----------------------------------------------------------------------------
//  225 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
//  226 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
//  227 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
//  228 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
//  229 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
//  230 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
//  231 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
//  232 
//  233 //-----------------------------------------------------------------------------
//  234 // association management
//  235 //-----------------------------------------------------------------------------
//  236 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
//  237 
//  238 //-----------------------------------------------------------------------------
//  239 // authentication management
//  240 //-----------------------------------------------------------------------------
//  241 void ZDSecMgrAuthNwkKey( void );
//  242 
//  243 //-----------------------------------------------------------------------------
//  244 // APSME function
//  245 //-----------------------------------------------------------------------------
//  246 void APSME_TCLinkKeyInit( uint8 setDefault );
//  247 uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
//  248 
//  249 /******************************************************************************
//  250  * @fn          ZDSecMgrAddrStore
//  251  *
//  252  * @brief       Store device addresses.
//  253  *
//  254  * @param       nwkAddr - [in] NWK address
//  255  * @param       extAddr - [in] EXT address
//  256  * @param       ami     - [out] Address Manager index
//  257  *
//  258  * @return      ZStatus_t
//  259  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  260 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrAddrStore:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
        CODE
//  261 {
        FUNCALL ZDSecMgrAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  262   ZStatus_t      status;
//  263   AddrMgrEntry_t entry;
//  264 
//  265 
//  266   // add entry
//  267   entry.user    = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  268   entry.nwkAddr = nwkAddr;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
//  269   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
//  270 
//  271   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_27:
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAddrStore_0
//  272   {
//  273     // return successful results
//  274     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  275     status = ZSuccess;
//  276   }
??CrossCallReturnLabel_72:
        SJMP    ??CrossCallReturnLabel_8
//  277   else
//  278   {
//  279     // return failed results
//  280     *ami   = entry.index;
??ZDSecMgrAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
//  281     status = ZNwkUnknownDevice;
//  282   }
//  283 
//  284   return status;
??CrossCallReturnLabel_8:
        LJMP    ?Subroutine0 & 0xFFFF
//  285 }
          CFI EndBlock cfiBlock0
//  286 
//  287 /******************************************************************************
//  288  * @fn          ZDSecMgrExtAddrStore
//  289  *
//  290  * @brief       Store EXT address.
//  291  *
//  292  * @param       extAddr - [in] EXT address
//  293  * @param       ami     - [out] Address Manager index
//  294  *
//  295  * @return      ZStatus_t
//  296  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  297 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrStore:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDSecMgrExtAddrStore
        CODE
//  298 {
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  299   ZStatus_t      status;
//  300   AddrMgrEntry_t entry;
//  301 
//  302 
//  303   // add entry
//  304   entry.user    = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  305   entry.nwkAddr = nwkAddr;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
//  306   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
//  307 
//  308   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_28:
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrExtAddrStore_0
//  309   {
//  310     // return successful results
//  311     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  312     status = ZSuccess;
//  313   }
??CrossCallReturnLabel_73:
        SJMP    ??CrossCallReturnLabel_9
//  314   else
//  315   {
//  316     // return failed results
//  317     *ami   = entry.index;
??ZDSecMgrExtAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
//  318     status = ZNwkUnknownDevice;
//  319   }
//  320 
//  321   return status;
??CrossCallReturnLabel_9:
        LJMP    ?Subroutine0 & 0xFFFF
//  322 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function ZDSecMgrExtAddrStore
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_158:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ZDSecMgrExtAddrStore
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     R1,#-0x38
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
//  323 
//  324 /******************************************************************************
//  325  * @fn          ZDSecMgrExtAddrLookup
//  326  *
//  327  * @brief       Lookup index for specified EXT address.
//  328  *
//  329  * @param       extAddr - [in] EXT address
//  330  * @param       ami     - [out] Address Manager index
//  331  *
//  332  * @return      ZStatus_t
//  333  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  334 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrLookup:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ZDSecMgrExtAddrLookup
        CODE
//  335 {
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  336   ZStatus_t      status;
//  337   AddrMgrEntry_t entry;
//  338 
//  339 
//  340   // lookup entry
//  341   entry.user = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  342   AddrMgrExtAddrSet( entry.extAddr, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  343 
//  344   if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrExtAddrLookup_0
//  345   {
//  346     // return successful results
//  347     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  348     status = ZSuccess;
//  349   }
??CrossCallReturnLabel_74:
        SJMP    ??CrossCallReturnLabel_10
//  350   else
//  351   {
//  352     // return failed results
//  353     *ami   = entry.index;
??ZDSecMgrExtAddrLookup_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
//  354     status = ZNwkUnknownDevice;
//  355   }
//  356 
//  357   return status;
??CrossCallReturnLabel_10:
        LJMP    ?Subroutine0 & 0xFFFF
//  358 }
          CFI EndBlock cfiBlock9
//  359 
//  360 /******************************************************************************
//  361  * @fn          ZDSecMgrAddrClear
//  362  *
//  363  * @brief       Clear security bit from Address Manager for specific device.
//  364  *
//  365  * @param       extAddr - [in] EXT address
//  366  *
//  367  * @return      ZStatus_t
//  368  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  369 ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
ZDSecMgrAddrClear:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ZDSecMgrAddrClear
        CODE
//  370 {
        FUNCALL ZDSecMgrAddrClear, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrClear, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  371   ZStatus_t status;
//  372   uint16 entryAmi;
//  373 
//  374   // get Address Manager Index
//  375   status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV     A,R1
        MOV     R6,A
//  376 
//  377   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrAddrClear_0
//  378   {
//  379     AddrMgrEntry_t addrEntry;
//  380 
//  381     // Clear SECURITY User bit from the address manager
//  382     addrEntry.user = ADDRMGR_USER_SECURITY;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  383     addrEntry.index = entryAmi;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
//  384 
//  385     if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
??CrossCallReturnLabel_125:
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??ZDSecMgrAddrClear_0
//  386     {
//  387       // return failure results
//  388       status = ZFailure;
        MOV     R6,#0x1
//  389     }
//  390   }
//  391 
//  392   return status;
??ZDSecMgrAddrClear_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0xf
        LJMP    ??Subroutine62_0 & 0xFFFF
//  393 }
          CFI EndBlock cfiBlock10
//  394 
//  395 /******************************************************************************
//  396  * @fn          ZDSecMgrEntryInit
//  397  *
//  398  * @brief       Initialize entry sub module
//  399  *
//  400  * @param       state - device initialization state
//  401  *
//  402  * @return      none
//  403  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  404 void ZDSecMgrEntryInit(uint8 state)
ZDSecMgrEntryInit:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
        CODE
//  405 {
        FUNCALL ZDSecMgrEntryInit, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryInit, ZDSecMgrRestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  406   if (ZDSecMgrEntries == NULL)
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_146:
        JNZ     ??ZDSecMgrEntryInit_0
//  407   {
//  408     uint16 index;
//  409 
//  410     if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#ZDSecMgrEntries
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_89:
        JZ      ??ZDSecMgrEntryInit_1
//  411     {
//  412       return;
//  413     }
//  414 
//  415     for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
        MOV     R0,#0x0
        MOV     R1,#0x0
//  416     {
//  417       ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryInit_2:
        LCALL   ?Subroutine32 & 0xFFFF
//  418 
//  419       ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
//  420     }
??CrossCallReturnLabel_35:
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_57:
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryInit_3
        INC     R1
??ZDSecMgrEntryInit_3:
        LCALL   ?Subroutine38 & 0xFFFF
//  421   }
??CrossCallReturnLabel_80:
        JC      ??ZDSecMgrEntryInit_2
//  422 
//  423 #if defined NV_RESTORE
//  424   if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
??ZDSecMgrEntryInit_0:
        MOV     A,R6
        JNZ     ??ZDSecMgrEntryInit_1
//  425   {
//  426     ZDSecMgrRestoreFromNV();
        ; Setup parameters for call to function ZDSecMgrRestoreFromNV
        LCALL   `??ZDSecMgrRestoreFromNV::?relay`; Banked call to: ZDSecMgrRestoreFromNV
//  427   }
//  428 #else
//  429   (void)state;
//  430 #endif
//  431 }
??ZDSecMgrEntryInit_1:
        LJMP    ??Subroutine63_0 & 0xFFFF
          CFI EndBlock cfiBlock11
//  432 
//  433 /******************************************************************************
//  434  * @fn          ZDSecMgrEntryLookup
//  435  *
//  436  * @brief       Lookup entry index using specified NWK address.
//  437  *
//  438  * @param       nwkAddr - [in] NWK address
//  439  * @param       entry   - [out] valid entry
//  440  *
//  441  * @return      ZStatus_t
//  442  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  443 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookup:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
        CODE
//  444 {
        FUNCALL ZDSecMgrEntryLookup, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  445   uint16         index;
//  446   AddrMgrEntry_t addrMgrEntry;
//  447 
//  448   // initialize results
//  449   *entry = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine11 & 0xFFFF
//  450 
//  451   // verify data is available
//  452   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_85:
        JZ      ??ZDSecMgrEntryLookup_0
//  453   {
//  454     addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  455     addrMgrEntry.nwkAddr = nwkAddr;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  456 
//  457     if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
??CrossCallReturnLabel_161:
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrEntryLookup_0
//  458     {
//  459       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  460       {
//  461         if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
??ZDSecMgrEntryLookup_1:
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDSecMgrEntryLookup_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDSecMgrEntryLookup_2:
        JNZ     ??ZDSecMgrEntryLookup_3
//  462         {
//  463           // return successful results
//  464           *entry = &ZDSecMgrEntries[index];
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        LCALL   ??Subroutine51_0 & 0xFFFF
//  465 
//  466           // break from loop
//  467           return ZSuccess;
//  468         }
//  469       }
??CrossCallReturnLabel_75:
        SJMP    ??ZDSecMgrEntryLookup_4
??ZDSecMgrEntryLookup_3:
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryLookup_5
        INC     R1
??ZDSecMgrEntryLookup_5:
        LCALL   ?Subroutine38 & 0xFFFF
//  470     }
//  471   }
??CrossCallReturnLabel_81:
        JC      ??ZDSecMgrEntryLookup_1
//  472 
//  473   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookup_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookup_4:
        LJMP    ?Subroutine0 & 0xFFFF
//  474 }
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ZDSecMgrExtAddrStore
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function ZDSecMgrAddrStore
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function ZDSecMgrExtAddrStore
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function ZDSecMgrEntryLookup
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function ZDSecMgrAddrStore
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function ZDSecMgrExtAddrStore
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     R1,#0x0
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
//  475 
//  476 /******************************************************************************
//  477  * @fn          ZDSecMgrEntryLookupAMI
//  478  *
//  479  * @brief       Lookup entry using specified address index
//  480  *
//  481  * @param       ami   - [in] Address Manager index
//  482  * @param       entry - [out] valid entry
//  483  *
//  484  * @return      ZStatus_t
//  485  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  486 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupAMI:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
        CODE
//  487 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  488   uint16 index;
//  489 
//  490   // initialize results
//  491   *entry = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine11 & 0xFFFF
//  492 
//  493   // verify data is available
//  494   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_86:
        JZ      ??ZDSecMgrEntryLookupAMI_0
//  495   {
//  496     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  497     {
//  498       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMI_1:
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDSecMgrEntryLookupAMI_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupAMI_2:
        JNZ     ??ZDSecMgrEntryLookupAMI_3
//  499       {
//  500         // return successful results
//  501         *entry = &ZDSecMgrEntries[index];
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine52_0 & 0xFFFF
//  502 
//  503         // break from loop
//  504         return ZSuccess;
//  505       }
//  506     }
??CrossCallReturnLabel_76:
        SJMP    ??ZDSecMgrEntryLookupAMI_4
??ZDSecMgrEntryLookupAMI_3:
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryLookupAMI_5
        INC     R1
??ZDSecMgrEntryLookupAMI_5:
        LCALL   ?Subroutine38 & 0xFFFF
//  507   }
??CrossCallReturnLabel_82:
        JC      ??ZDSecMgrEntryLookupAMI_1
//  508 
//  509   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupAMI_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupAMI_4:
        LJMP    ??Subroutine63_0 & 0xFFFF
//  510 }
          CFI EndBlock cfiBlock30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function ZDSecMgrEntryLookup
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        CLR     C
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function ZDSecMgrReadKeyFromNv
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function ZDSecMgrEntryInit
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function ZDSecMgrEntryLookup
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        SUBB    A,#0x3
        MOV     A,R1
        SUBB    A,#0x0
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function ZDSecMgrEntryNew
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function ZDSecMgrWriteNV
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function ZDSecMgrEntryLookup
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function ZDSecMgrEntryNew
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function ZDSecMgrWriteNV
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_159:
        ORL     A,R1
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function ZDSecMgrExtAddrStore
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_28
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function ZDSecMgrEntryLookup
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_85
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_86
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-4
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function ZDSecMgrEntryNew
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_87
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-4
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function ZDSecMgrWriteNV
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_88
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-4
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function ZDSecMgrEntryInit
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_89
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-4
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_154
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function APSME_IsLinkKeyValid
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_155
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function ZDSecMgrAddLinkKey
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_156
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_157
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function ZDSecMgrEntryInit
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_146
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_147
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_148
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function ZDSecMgrEntryFree
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_149
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-4
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function ZDSecMgrEntryFree
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_150
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function ZDSecMgrDeviceJoin
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_151
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_152
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function APSME_KeyFwdToChild
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_153
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        RET
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74
//  511 
//  512 /******************************************************************************
//  513  * @fn          ZDSecMgrEntryLookupExt
//  514  *
//  515  * @brief       Lookup entry index using specified EXT address.
//  516  *
//  517  * @param       extAddr - [in] EXT address
//  518  * @param       entry   - [out] valid entry
//  519  *
//  520  * @return      ZStatus_t
//  521  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  522 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupExt:
          CFI Block cfiBlock75 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExt
        CODE
//  523 {
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  524   ZStatus_t status;
//  525   uint16    ami;
//  526 
//  527   // initialize results
//  528   *entry = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  529   status = ZNwkUnknownDevice;
        MOV     ?V0,#-0x38
//  530 
//  531   // lookup address index
//  532   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryLookupExt_0
//  533   {
//  534     status = ZDSecMgrEntryLookupAMI( ami, entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine57_0 & 0xFFFF
//  535   }
??CrossCallReturnLabel_102:
        LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
        MOV     A,R1
        MOV     ?V0,A
//  536 
//  537   return status;
??ZDSecMgrEntryLookupExt_0:
        MOV     R1,?V0
        LJMP    ?Subroutine7 & 0xFFFF
//  538 }
          CFI EndBlock cfiBlock75
//  539 
//  540 /******************************************************************************
//  541  * @fn          ZDSecMgrEntryLookupExtGetIndex
//  542  *
//  543  * @brief       Lookup entry index using specified EXT address.
//  544  *
//  545  * @param       extAddr - [in] EXT address
//  546  * @param       entryIndex - [out] valid index to the entry table
//  547  *
//  548  * @return      ZStatus_t
//  549  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  550 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
ZDSecMgrEntryLookupExtGetIndex:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExtGetIndex
        CODE
//  551 {
        FUNCALL ZDSecMgrEntryLookupExtGetIndex, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  552   uint16 ami;
//  553   uint16 index;
//  554 
//  555   // lookup address index
//  556   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_0
//  557   {
//  558     // verify data is available
//  559     if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_147:
        JZ      ??ZDSecMgrEntryLookupExtGetIndex_0
//  560     {
//  561       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  562       {
//  563         if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupExtGetIndex_1:
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDSecMgrEntryLookupExtGetIndex_2:
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_3
//  564         {
//  565           // return successful results
//  566           *entry = &ZDSecMgrEntries[index];
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine23 & 0xFFFF
//  567           *entryIndex = index;
??CrossCallReturnLabel_17:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
//  568 
//  569           // break from loop
//  570           return ZSuccess;
//  571         }
//  572       }
??CrossCallReturnLabel_43:
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_77:
        SJMP    ??ZDSecMgrEntryLookupExtGetIndex_4
??ZDSecMgrEntryLookupExtGetIndex_3:
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_5
        INC     R1
??ZDSecMgrEntryLookupExtGetIndex_5:
        LCALL   ?Subroutine38 & 0xFFFF
//  573     }
//  574   }
??CrossCallReturnLabel_83:
        JC      ??ZDSecMgrEntryLookupExtGetIndex_1
//  575 
//  576   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupExtGetIndex_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupExtGetIndex_4:
        LJMP    ?Subroutine7 & 0xFFFF
//  577 }
          CFI EndBlock cfiBlock76

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function ZDSecMgrEntryInit
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_35
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_36
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83
//  578 
//  579 /******************************************************************************
//  580  * @fn          ZDSecMgrEntryLookupAMIGetIndex
//  581  *
//  582  * @brief       Lookup entry using specified address index
//  583  *
//  584  * @param       ami   - [in] Address Manager index
//  585  * @param       entryIndex - [out] valid index to the entry table
//  586  *
//  587  * @return      ZStatus_t
//  588  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  589 ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
ZDSecMgrEntryLookupAMIGetIndex:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMIGetIndex
        CODE
//  590 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  591   uint16 index;
//  592 
//  593   // verify data is available
//  594   if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_148:
        JZ      ??ZDSecMgrEntryLookupAMIGetIndex_0
//  595   {
//  596     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  597     {
//  598       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMIGetIndex_1:
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     DPL,?V0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupAMIGetIndex_2:
        JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_3
//  599       {
//  600         // return successful results
//  601         *entryIndex = index;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine52_0 & 0xFFFF
//  602 
//  603         // break from loop
//  604         return ZSuccess;
//  605       }
//  606     }
??CrossCallReturnLabel_78:
        SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_4
??ZDSecMgrEntryLookupAMIGetIndex_3:
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_5
        INC     R1
??ZDSecMgrEntryLookupAMIGetIndex_5:
        LCALL   ?Subroutine38 & 0xFFFF
//  607   }
??CrossCallReturnLabel_84:
        JC      ??ZDSecMgrEntryLookupAMIGetIndex_1
//  608 
//  609   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupAMIGetIndex_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupAMIGetIndex_4:
        LJMP    ??Subroutine63_0 & 0xFFFF
//  610 }
          CFI EndBlock cfiBlock84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0x5
        MUL     AB
        MOV     R6,A
        MOV     ?V0,B
        MOV     B,#0x5
        MOV     A,R7
        MUL     AB
        ADD     A,?V0
        MOV     R7,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87
//  611 
//  612 /******************************************************************************
//  613  * @fn          ZDSecMgrEntryFree
//  614  *
//  615  * @brief       Free entry.
//  616  *
//  617  * @param       entry - [in] valid entry
//  618  *
//  619  * @return      ZStatus_t
//  620  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  621 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
ZDSecMgrEntryFree:
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
        CODE
//  622 {
        FUNCALL ZDSecMgrEntryFree, ZDSecMgrEntryLookupAMIGetIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  623   APSME_LinkKeyData_t   *pApsLinkKey = NULL;
//  624 
//  625 #if defined ( NV_RESTORE )
//  626   ZStatus_t status;
//  627   uint16 entryIndex;
//  628 
//  629   status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMIGetIndex
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL   `??ZDSecMgrEntryLookupAMIGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupAMIGetIndex
        MOV     A,R1
        MOV     ?V2,A
//  630 #endif
//  631 
//  632   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
//  633 
//  634   if (pApsLinkKey != NULL)
        MOV     A,R2
        ORL     A,?V5
        JZ      ??ZDSecMgrEntryFree_0
//  635   {
//  636     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  637 
//  638     // Clear the APS Link key in NV
//  639     osal_nv_write( entry->keyNvId, 0,
//  640                         sizeof(APSME_LinkKeyData_t), pApsLinkKey);
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_49:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V6,#0x18
        MOV     ?V7,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0
        MOV     DPH,R1
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  641 
//  642     // set entry to invalid Key
//  643     entry->keyNvId = SEC_NO_KEY_NV_ID;
        MOV     DPL,?V0
        MOV     DPH,?V1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  644 
//  645     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V4
        MOV     R3,?V5
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  646   }
//  647 
//  648   // marking the entry as INVALID_NODE_ADDR
//  649   entry->ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryFree_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine22 & 0xFFFF
//  650 
//  651   // set to default value
//  652   entry->authenticateOption = ZDSecMgr_Not_Authenticated;
??CrossCallReturnLabel_11:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  653 
//  654 #if defined ( NV_RESTORE )
//  655   if ( status == ZSuccess )
        MOV     A,?V2
        JZ      $+5
        LJMP    ??ZDSecMgrEntryFree_1 & 0xFFFF
//  656   {
//  657     ZDSecMgrUpdateNV(entryIndex);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine57_0 & 0xFFFF
//  658   }
??CrossCallReturnLabel_105:
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0x5
        MUL     AB
        MOV     R6,A
        MOV     R0,B
        MOV     B,#0x5
        MOV     A,R7
        MUL     AB
        ADD     A,R0
        MOV     R7,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_149:
        JZ      ??ZDSecMgrEntryFree_2
        ; Setup parameters for call to function osal_nv_write
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,#0x5
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     R0,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
??ZDSecMgrEntryFree_2:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryFree_1
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrEntryFree_3
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrEntryFree_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??ZDSecMgrEntryFree_4
        LCALL   ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_150:
        JZ      ??ZDSecMgrEntryFree_5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        SJMP    ??CrossCallReturnLabel_45
??ZDSecMgrEntryFree_4:
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_45:
        MOVX    @DPTR,A
??ZDSecMgrEntryFree_5:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  659 #endif
//  660 }
??ZDSecMgrEntryFree_1:
        MOV     A,#0x4
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock88
//  661 
//  662 /******************************************************************************
//  663  * @fn          ZDSecMgrEntryNew
//  664  *
//  665  * @brief       Get a new entry.
//  666  *
//  667  * @param       entry - [out] valid entry
//  668  *
//  669  * @return      ZStatus_t
//  670  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  671 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
ZDSecMgrEntryNew:
          CFI Block cfiBlock89 Using cfiCommon0
          CFI Function ZDSecMgrEntryNew
        CODE
//  672 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  673   uint16 index;
//  674 
//  675   // initialize results
//  676   *entry = NULL;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine11 & 0xFFFF
//  677 
//  678   // verify data is available
//  679   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_87:
        JZ      ??ZDSecMgrEntryNew_0
//  680   {
//  681     // find available entry
//  682     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R4,#0x0
        MOV     R5,#0x0
//  683     {
//  684       if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
??ZDSecMgrEntryNew_1:
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R6,B
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrEntryNew_2
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrEntryNew_2:
        JNZ     ??ZDSecMgrEntryNew_3
//  685       {
//  686         // return successful result
//  687         *entry = &ZDSecMgrEntries[index];
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  688 
//  689         // Set the authentication option to default
//  690         ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  691 
//  692         // break from loop
//  693         return ZSuccess;
        MOV     R1,A
        SJMP    ??ZDSecMgrEntryNew_4
//  694       }
//  695     }
??ZDSecMgrEntryNew_3:
        INC     R4
        MOV     A,R4
        JNZ     ??ZDSecMgrEntryNew_5
        INC     R5
??ZDSecMgrEntryNew_5:
        CLR     C
        SUBB    A,#0x3
        MOV     A,R5
        SUBB    A,#0x0
        JC      ??ZDSecMgrEntryNew_1
//  696   }
//  697 
//  698   return ZNwkUnknownDevice;
??ZDSecMgrEntryNew_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryNew_4:
        LJMP    ??Subroutine63_0 & 0xFFFF
//  699 }
          CFI EndBlock cfiBlock89
//  700 
//  701 /******************************************************************************
//  702  * @fn          ZDSecMgrAppKeyGet
//  703  *
//  704  * @brief       get an APP key - option APP(MASTER or LINK) key
//  705  *
//  706  * @param       initNwkAddr - [in] NWK address of initiator device
//  707  * @param       initExtAddr - [in] EXT address of initiator device
//  708  * @param       partNwkAddr - [in] NWK address of partner device
//  709  * @param       partExtAddr - [in] EXT address of partner device
//  710  * @param       key         - [out] APP(MASTER or LINK) key
//  711  * @param       keyType     - [out] APP(MASTER or LINK) key type
//  712  *
//  713  * @return      ZStatus_t
//  714  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  715 uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
ZDSecMgrAppKeyType:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
        REQUIRE __INIT_XDATA_I
//  716                                                  // to KEY_TYPE_APP_LINK since
//  717                                                  // only specific requirement
//  718                                                  // right now comes from SE profile
//  719 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  720 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
ZDSecMgrAppKeyGet:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyGet
        CODE
//  721                              uint8*  initExtAddr,
//  722                              uint16  partNwkAddr,
//  723                              uint8*  partExtAddr,
//  724                              uint8** key,
//  725                              uint8*  keyType )
//  726 {
        FUNCALL ZDSecMgrAppKeyGet, SSP_GetTrueRand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  727   // Intentionally unreferenced parameters
//  728   (void)initNwkAddr;
//  729   (void)initExtAddr;
//  730   (void)partNwkAddr;
//  731   (void)partExtAddr;
//  732 
//  733   //---------------------------------------------------------------------------
//  734   // note:
//  735   // should use a robust mechanism to generate keys, for example
//  736   // combine EXT addresses and call a hash function
//  737   //---------------------------------------------------------------------------
//  738   SSP_GetTrueRand( SEC_KEY_LEN, *key );
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV     R1,#0x10
        LCALL   `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
//  739 
//  740   *keyType = ZDSecMgrAppKeyType;
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_32:
        POP     A
          CFI EndBlock cfiBlock90
        REQUIRE ?Subroutine9
        ; // Fall through to label ?Subroutine9
//  741 
//  742   return ZSuccess;
//  743 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        MOV     R1,#0x0
        LJMP    ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock91
//  744 
//  745 /******************************************************************************
//  746  * @fn          ZDSecMgrAppKeyReq
//  747  *
//  748  * @brief       Process request for APP key between two devices.
//  749  *
//  750  * @param       device - [in] ZDO_RequestKeyInd_t, request info
//  751  *
//  752  * @return      none
//  753  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  754 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
ZDSecMgrAppKeyReq:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
        CODE
//  755 {
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, ZDSecMgrAppKeyGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 39
        MOV     A,#-0x27
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  756   APSME_TransportKeyReq_t req;
//  757   uint8                   initExtAddr[Z_EXTADDR_LEN];
//  758   uint16                  partNwkAddr;
//  759   uint8                   key[SEC_KEY_LEN];
//  760 
//  761 
//  762   // validate initiator and partner
//  763   if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
//  764        ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
        MOV     A,R6
        ADD     A,#0x5
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,?V0
        MOV     R3,A
        LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x2
        CLR     A
        ADDC    A,R7
        INC     R6
        INC     R6
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP102_8
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
//  765   {
//  766     // point the key to some memory
//  767     req.key = key;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP100_8
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
//  768 
//  769     // get an APP key - option APP (MASTER or LINK) key
//  770     if ( ZDSecMgrAppKeyGet( ind->srcAddr,
//  771                             initExtAddr,
//  772                             partNwkAddr,
//  773                             ind->partExtAddr,
//  774                             &req.key,
//  775                             &req.keyType ) == ZSuccess )
??CrossCallReturnLabel_126:
        ; Setup parameters for call to function ZDSecMgrAppKeyGet
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V2,DPL
        MOV     ?V3,DPH
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V2,DPL
        MOV     ?V3,DPH
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 55)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 57)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP102_8
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_108:
        LCALL   `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,R1
        JNZ     ??ZDSecMgrAppKeyReq_0
//  776     {
//  777       // always secure
//  778       req.nwkSecure = TRUE;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  779       req.apsSecure = TRUE;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  780       req.tunnel    = NULL;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine22 & 0xFFFF
//  781 
//  782       // send key to initiator device
//  783       req.dstAddr   = ind->srcAddr;
??CrossCallReturnLabel_12:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
//  784       req.extAddr   = ind->partExtAddr;
??CrossCallReturnLabel_127:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  785       req.initiator = TRUE;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  786       APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        INC     A
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
//  787 
//  788       // send key to partner device
//  789       req.dstAddr   = partNwkAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
//  790       req.extAddr   = initExtAddr;
??CrossCallReturnLabel_128:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
//  791       req.initiator = FALSE;
??CrossCallReturnLabel_129:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  792 
//  793       APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
//  794 
//  795       // clear copy of key in RAM
//  796       osal_memset( key, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  797 
//  798     }
//  799   }
//  800 }
??ZDSecMgrAppKeyReq_0:
        MOV     A,#0x27
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function ZDSecMgrAppKeyReq
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97
//  801 
//  802 /******************************************************************************
//  803  * @fn          ZDSecMgrSendNwkKey
//  804  *
//  805  * @brief       Send NWK key to device joining network.
//  806  *
//  807  * @param       device - [in] ZDSecMgrDevice_t, device info
//  808  *
//  809  * @return      ZStatus_t
//  810  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  811 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
ZDSecMgrSendNwkKey:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
        CODE
//  812 {
        FUNCALL ZDSecMgrSendNwkKey, NLME_ReadNwkKeyInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 34
        MOV     A,#-0x22
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  813   ZStatus_t status;
//  814   APSME_TransportKeyReq_t req;
//  815   APSDE_FrameTunnel_t tunnel;
//  816   nwkKeyDesc tmpKey;
//  817 
//  818   req.dstAddr   = device->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
//  819   req.extAddr   = device->extAddr;
??CrossCallReturnLabel_130:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
//  820 
//  821   req.keyType   = KEY_TYPE_NWK;
??CrossCallReturnLabel_131:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  822 
//  823   // get the Active Key into a local variable
//  824   if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
//  825                            ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
        ; Setup parameters for call to function NLME_ReadNwkKeyInfo
        MOV     ?V2,#0x3a
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,R1
        JZ      ??ZDSecMgrSendNwkKey_0
//  826   {
//  827     // set key data to all 0s if NV read fails
//  828     osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  829   }
//  830 
//  831   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
//  832   {
//  833     // set values
//  834     req.keySeqNum = tmpKey.keySeqNum;
??ZDSecMgrSendNwkKey_0:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  835     req.key       = tmpKey.key;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
//  836 
//  837     //devtag.pro.security.todo - make sure that if there is no link key the NWK
//  838     //key isn't used to secure the frame at the APS layer -- since the receiving
//  839     //device may not have a NWK key yet
//  840     req.apsSecure = TRUE;
??CrossCallReturnLabel_132:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  841 
//  842     // check if using secure hop to parent
//  843     if ( device->parentAddr == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDSecMgrSendNwkKey_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrSendNwkKey_1:
        JNZ     ??ZDSecMgrSendNwkKey_2
//  844     {
//  845       req.nwkSecure = FALSE;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  846       req.tunnel    = NULL;
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??ZDSecMgrSendNwkKey_3
//  847     }
//  848     else
//  849     {
//  850       req.nwkSecure   = TRUE;
??ZDSecMgrSendNwkKey_2:
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  851       req.tunnel      = &tunnel;
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?XSP + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?XSP + 1
        LCALL   ?Subroutine19 & 0xFFFF
//  852       req.tunnel->tna = device->parentAddr;
//  853       req.tunnel->dea = device->extAddr;
//  854     }
//  855   }
??CrossCallReturnLabel_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??ZDSecMgrSendNwkKey_3:
        MOVX    @DPTR,A
//  856   else
//  857   {
//  858     // default values
//  859     //devtag.0604.verify
//  860     req.nwkSecure = TRUE;
//  861     req.apsSecure = FALSE;
//  862     req.tunnel    = NULL;
//  863 
//  864     if ( device->parentAddr != NLME_GetShortAddr() )
//  865     {
//  866       req.dstAddr = device->parentAddr;
//  867     }
//  868 
//  869     // send the real key
//  870     if ( zgPreConfigKeys == FALSE )
//  871     {
//  872       req.keySeqNum = tmpKey.keySeqNum;
//  873       req.key       = tmpKey.key;
//  874 
//  875       // check if using secure hop to to parent
//  876       if ( device->parentAddr == NLME_GetShortAddr() )
//  877       {
//  878         req.nwkSecure = FALSE;
//  879       }
//  880     }
//  881     else
//  882     {
//  883       // this is to send the all zero key when the NWK key has been preconfigured
//  884       req.key       = NULL;
//  885       req.keySeqNum = 0;
//  886     }
//  887   }
//  888 
//  889   status = APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
        MOV     A,R1
        MOV     R6,A
//  890 
//  891   // clear copy of key in RAM before return
//  892   osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  893 
//  894   return status;
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x22
        LJMP    ?Subroutine3 & 0xFFFF
//  895 }
          CFI EndBlock cfiBlock98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function ZDSecMgrSendNwkKey
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101
//  896 
//  897 /******************************************************************************
//  898  * @fn          ZDSecMgrDeviceRemoveByExtAddr
//  899  *
//  900  * @brief       Remove device entry by its ext address.
//  901  *
//  902  * @param       pAddr - pointer to the extended address
//  903  *
//  904  * @return      ZStatus_t
//  905  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  906 ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
ZDSecMgrDeviceRemoveByExtAddr:
          CFI Block cfiBlock102 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemoveByExtAddr
        CODE
//  907 {
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  908   ZDSecMgrEntry_t *pEntry;
//  909   uint8           retValue;
//  910 
//  911   retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV     A,R1
        MOV     R6,A
//  912 
//  913   if( retValue == ZSuccess )
        JNZ     ??ZDSecMgrDeviceRemoveByExtAddr_0
//  914   {
//  915     // remove device from entry data
//  916     ZDSecMgrEntryFree( pEntry );
        ; Setup parameters for call to function ZDSecMgrEntryFree
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine57_0 & 0xFFFF
//  917   }
??CrossCallReturnLabel_109:
        LCALL   `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
//  918 
//  919   return retValue;
??ZDSecMgrDeviceRemoveByExtAddr_0:
        MOV     A,R6
        MOV     R1,A
          CFI EndBlock cfiBlock102
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
//  920 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock103 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        LJMP    ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock103
//  921 
//  922 /******************************************************************************
//  923  * @fn          ZDSecMgrDeviceRemove
//  924  *
//  925  * @brief       Remove device from network.
//  926  *
//  927  * @param       device - [in] ZDSecMgrDevice_t, device info
//  928  *
//  929  * @return      none
//  930  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  931 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceRemove:
          CFI Block cfiBlock104 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
        CODE
//  932 {
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  933   APSME_RemoveDeviceReq_t remDevReq;
//  934   NLME_LeaveReq_t         leaveReq;
//  935   associated_devices_t*   assoc;
//  936 
//  937   // check if parent, remove the device
//  938   if ( device->parentAddr == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_119:
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,?V0
        XRL     A,R2
        JNZ     ??ZDSecMgrDeviceRemove_0
        MOV     A,?V1
        XRL     A,R3
??ZDSecMgrDeviceRemove_0:
        JZ      $+5
        LJMP    ??ZDSecMgrDeviceRemove_1 & 0xFFFF
//  939   {
//  940     // this is the parent of the device
//  941     leaveReq.extAddr        = device->extAddr;
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL   ?Subroutine17 & 0xFFFF
//  942     leaveReq.removeChildren = FALSE;
??CrossCallReturnLabel_171:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  943     leaveReq.rejoin         = FALSE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  944 
//  945     // find child association
//  946     assoc = AssocGetWithExt( device->extAddr );
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_111:
        LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
//  947 
//  948     if ( ( assoc != NULL                            ) &&
//  949          ( assoc->nodeRelation >= CHILD_RFD         ) &&
//  950          ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDSecMgrDeviceRemove_2
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDSecMgrDeviceRemove_2
        CLR     C
        SUBB    A,#0x5
        JNC     ??ZDSecMgrDeviceRemove_2
//  951     {
//  952       // check if associated device is authenticated
//  953       if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        MOV     A,#0x4
        JC      ??ZDSecMgrDeviceRemove_3
//  954       {
//  955         leaveReq.silent = FALSE;
//  956       }
//  957       else
//  958       {
//  959         leaveReq.silent = TRUE;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrDeviceRemove_4
        ; Setup parameters for call to function NLME_LeaveReq
//  960       }
//  961 
//  962       NLME_LeaveReq( &leaveReq );
//  963     }
//  964     else if ( device->nwkAddr == NLME_GetShortAddr() )
??ZDSecMgrDeviceRemove_2:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDSecMgrDeviceRemove_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrDeviceRemove_5:
        JNZ     ??ZDSecMgrDeviceRemove_6
//  965     {
//  966       // this is when ZC wants that ZR removes itself from the network
//  967       leaveReq.extAddr = NULL;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  968       leaveReq.silent = FALSE;
        MOV     A,#0x4
??ZDSecMgrDeviceRemove_3:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
//  969 
//  970       NLME_LeaveReq( &leaveReq );
//  971     }
//  972   }
??ZDSecMgrDeviceRemove_4:
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_163:
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        SJMP    ??ZDSecMgrDeviceRemove_6
//  973   else
//  974   {
//  975     // this is not the parent of the device
//  976     remDevReq.parentAddr   = device->parentAddr;
??ZDSecMgrDeviceRemove_1:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine19 & 0xFFFF
//  977     remDevReq.childExtAddr = device->extAddr;
??CrossCallReturnLabel_7:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
//  978 
//  979 #if defined ( APP_TP2_TEST_MODE )
//  980     if ( guTxApsSecON == TRUE )
//  981     {
//  982       remDevReq.apsSecure = TRUE;
//  983     }
//  984     else
//  985     {
//  986       remDevReq.apsSecure = FALSE;
//  987     }
//  988 
//  989     APSME_RemoveDeviceReq( &remDevReq );
//  990 
//  991 #else
//  992     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
//  993     {
//  994       // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
//  995       // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
//  996       // with legacy Coordinator devices which can only handle one or the other.
//  997       if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
??CrossCallReturnLabel_133:
        MOV     DPTR,#zgApsLinkKeyType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceRemove_7
//  998       {
//  999         remDevReq.apsSecure = FALSE;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1000 
// 1001         APSME_RemoveDeviceReq( &remDevReq );
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
// 1002       }
// 1003 
// 1004       remDevReq.apsSecure = TRUE;
??ZDSecMgrDeviceRemove_7:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1005 
// 1006       APSME_RemoveDeviceReq( &remDevReq );
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
// 1007     }
// 1008     else
// 1009     {
// 1010       remDevReq.apsSecure = FALSE;
// 1011 
// 1012       APSME_RemoveDeviceReq( &remDevReq );
// 1013     }
// 1014 #endif
// 1015   }
// 1016 }
??ZDSecMgrDeviceRemove_6:
        MOV     A,#0xa
        LJMP    ??Subroutine69_0 & 0xFFFF
          CFI EndBlock cfiBlock104

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function ZDSecMgrDeviceRemove
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_98:
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107
// 1017 
// 1018 /******************************************************************************
// 1019  * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
// 1020  *
// 1021  * @brief       Decide whether device is allowed.
// 1022  *
// 1023  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1024  *
// 1025  * @return      ZStatus_t
// 1026  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1027 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateRM:
          CFI Block cfiBlock108 Using cfiCommon0
          CFI Function ZDSecMgrDeviceValidateRM
        CODE
// 1028 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1029   ZStatus_t status;
// 1030 
// 1031   status = ZSuccess;
        MOV     R1,#0x0
// 1032 
// 1033   (void)device;  // Intentionally unreferenced parameter
// 1034 
// 1035   // For test purpose, turning off the zgSecurePermitJoin flag will force
// 1036   // the trust center to reject any newly joining devices by sending
// 1037   // Remove-device to the parents.
// 1038   if ( zgSecurePermitJoin == FALSE )
        MOV     DPTR,#zgSecurePermitJoin
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceValidateRM_0
// 1039   {
// 1040     status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
// 1041   }
// 1042 
// 1043 
// 1044 
// 1045 #if 0  // Taken out because the following functionality is only used for test
// 1046        // purpose. A more efficient (above) way is used. It can be put
// 1047        // back in if customers request for a white/black list feature.
// 1048        // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
// 1049 
// 1050   // The following code processes the device black list (stored device list)
// 1051   // If the joining device is not part of the forbidden device list
// 1052   // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
// 1053   // will send Remove-device and ban the device from joining.
// 1054 
// 1055   uint8     index;
// 1056   uint8*    restricted;
// 1057 
// 1058   // Look through the stored device list - used for restricted devices
// 1059   for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
// 1060   {
// 1061     restricted = ZDSecMgrStoredDeviceList[index];
// 1062 
// 1063     if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
// 1064     {
// 1065       // return as unknown device in regards to validation
// 1066       status = ZNwkUnknownDevice;
// 1067 
// 1068       // break from loop
// 1069       index = ZDSECMGR_STORED_DEVICES;
// 1070     }
// 1071   }
// 1072 
// 1073 #endif
// 1074 
// 1075   return status;
??ZDSecMgrDeviceValidateRM_0:
        LJMP    ??Subroutine59_0 & 0xFFFF
// 1076 }
          CFI EndBlock cfiBlock108
// 1077 
// 1078 /******************************************************************************
// 1079  * @fn          ZDSecMgrDeviceValidate
// 1080  *
// 1081  * @brief       Decide whether device is allowed.
// 1082  *
// 1083  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1084  *
// 1085  * @return      ZStatus_t
// 1086  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1087 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidate:
          CFI Block cfiBlock109 Using cfiCommon0
          CFI Function ZDSecMgrDeviceValidate
        CODE
// 1088 {
        FUNCALL ZDSecMgrDeviceValidate, ZDSecMgrDeviceValidateRM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1089   ZStatus_t status;
// 1090 
// 1091   if ( ZDSecMgrPermitJoiningEnabled == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_0
// 1092   {
// 1093     status = ZDSecMgrDeviceValidateRM( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
        LCALL   `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
        MOV     A,R1
        MOV     R1,A
        SJMP    ??ZDSecMgrDeviceValidate_1
// 1094   }
// 1095   else
// 1096   {
// 1097     status = ZNwkUnknownDevice;
??ZDSecMgrDeviceValidate_0:
        MOV     R1,#-0x38
// 1098   }
// 1099 
// 1100   return status;
??ZDSecMgrDeviceValidate_1:
        LJMP    ??Subroutine59_0 & 0xFFFF
// 1101 }
          CFI EndBlock cfiBlock109
// 1102 
// 1103 /******************************************************************************
// 1104  * @fn          ZDSecMgrDeviceJoin
// 1105  *
// 1106  * @brief       Try to join this device.
// 1107  *
// 1108  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1109  *
// 1110  * @return      ZStatus_t
// 1111  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1112 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoin:
          CFI Block cfiBlock110 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoin
        CODE
// 1113 {
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceValidate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1114   ZStatus_t status = ZSuccess;
        MOV     ?V4,#0x0
// 1115   uint16    ami;
// 1116 
// 1117   // attempt to validate device that joined/rejoined without security
// 1118   if ( device->secure == FALSE )
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceJoin_0
// 1119   {
// 1120     status = ZDSecMgrDeviceValidate( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidate
        LCALL   `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
        MOV     A,R1
        MOV     ?V4,A
// 1121   }
// 1122 
// 1123   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoin_1
// 1124   {
// 1125     // Add the device to the address manager
// 1126     ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
??ZDSecMgrDeviceJoin_0:
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_112:
        LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1127 
// 1128     // Only send the key to devices that have not been authenticated
// 1129     if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
// 1130          ( device->secure == FALSE ) )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JNC     ??ZDSecMgrDeviceJoin_1
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceJoin_1
// 1131     {
// 1132       //send the nwk key data to the joining device
// 1133       status = ZDSecMgrSendNwkKey( device );
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
        MOV     A,R1
        MOV     ?V4,A
// 1134     }
// 1135 
// 1136     if ( status != ZSuccess )
        JZ      ??ZDSecMgrDeviceJoin_2
// 1137     {
// 1138       ZDSecMgrAddrClear( device->extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine57_0 & 0xFFFF
// 1139     }
// 1140   }
??CrossCallReturnLabel_113:
        LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
        SJMP    ??ZDSecMgrDeviceJoin_3
// 1141 
// 1142   if ( status != ZSuccess )
??ZDSecMgrDeviceJoin_1:
        MOV     A,?V4
        JZ      ??ZDSecMgrDeviceJoin_2
// 1143   {
// 1144     // not allowed or transport key failed, remove the device
// 1145     ZDSecMgrDeviceRemove( device );
??ZDSecMgrDeviceJoin_3:
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
        SJMP    ??ZDSecMgrDeviceJoin_4
// 1146   }
// 1147   else
// 1148   {
// 1149     // Pass the Trust Center Device Indication to higher layer if callback registered
// 1150     if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
??ZDSecMgrDeviceJoin_2:
        MOV     DPTR,#zdoCBFunc + 16
        LCALL   ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_151:
        JZ      ??ZDSecMgrDeviceJoin_4
// 1151     {
// 1152       ZDO_TC_Device_t dev;
// 1153 
// 1154       dev.nwkAddr = device->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
// 1155       osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
??CrossCallReturnLabel_5:
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1156       dev.parentAddr = device->parentAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
// 1157 
// 1158       zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
??CrossCallReturnLabel_134:
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     DPTR,#zdoCBFunc + 16
        LCALL   ?Subroutine31 & 0xFFFF
// 1159     }
// 1160   }
??CrossCallReturnLabel_33:
        LCALL   ?CALL_IND
// 1161 
// 1162   return status;
??ZDSecMgrDeviceJoin_4:
        MOV     R1,?V4
        MOV     A,#0xe
        LJMP    ?Subroutine1 & 0xFFFF
// 1163 }
          CFI EndBlock cfiBlock110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function ZDSecMgrDeviceJoin
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function ZDSecMgrAddLinkKey
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyGet
          CFI Conditional ??CrossCallReturnLabel_31
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function ZDSecMgrAppKeyGet
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond117) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond117) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond117) CFA_SP SP+-8
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function ZDSecMgrDeviceJoin
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function APSME_LinkKeySet
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_63:
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyGet
          CFI Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_31
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function ZDSecMgrAppKeyGet
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_32
          CFI (cfiCond122) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond122) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond122) CFA_SP SP+-10
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function ZDSecMgrDeviceJoin
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_33
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function APSME_LinkKeySet
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_34
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function APSME_LinkKeySet
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_122
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function APSME_LinkKeySet
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_123
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_124
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function ZDSecMgrAuthenticationSet
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_29
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function ZDSecMgrAuthenticationCheck
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_30
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoin
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function APSME_LinkKeySet
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker134 Using cfiCommon1
          CFI (cfiPicker134) NoFunction
          CFI (cfiPicker134) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiPicker134
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiCond135 Using cfiCommon0
          CFI Function ZDSecMgrAddrClear
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function ZDSecMgrSendNwkKey
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function ZDSecMgrSendNwkKey
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function ZDSecMgrAPSRemove
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond138) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond138) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond138) CFA_SP SP+-7
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function ZDSecMgrDeviceJoin
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function APSME_LinkKeySet
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker142 Using cfiCommon1
          CFI (cfiPicker142) NoFunction
          CFI (cfiPicker142) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_101:
        RET
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiPicker142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond143 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function ZDSecMgrExtAddrStore
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_9
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-4
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_10
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-4
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function ZDSecMgrSendNwkKey
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_6
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function ZDSecMgrDeviceRemove
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_7
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-4
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function ZDSecMgrDeviceJoin
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_94
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-4
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_95
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-4
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function APSME_LinkKeySet
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_96
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-4
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function ZDSecMgrAddrClear
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_90
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-4
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function ZDSecMgrSendNwkKey
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_91
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-4
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function ZDSecMgrSendNwkKey
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_92
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-4
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function ZDSecMgrAPSRemove
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_93
          CFI (cfiCond154) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond154) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond154) CFA_SP SP+-9
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function ZDSecMgrAppKeyReq
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_23
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function ZDSecMgrAppKeyReq
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_24
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function ZDSecMgrDeviceJoin
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_25
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_26
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_0
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_1
          CFI (cfiCond160) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond160) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond160) CFA_SP SP+-9
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function ZDSecMgrAppKeyReq
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function ZDSecMgrDeviceJoin
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker166 Using cfiCommon1
          CFI (cfiPicker166) NoFunction
          CFI (cfiPicker166) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiPicker166

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond167 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function ZDSecMgrDeviceJoin
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker169 Using cfiCommon1
          CFI (cfiPicker169) NoFunction
          CFI (cfiPicker169) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiPicker169
// 1164 
// 1165 /******************************************************************************
// 1166  * @fn          ZDSecMgrDeviceJoinDirect
// 1167  *
// 1168  * @brief       Try to join this device as a direct child.
// 1169  *
// 1170  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1171  *
// 1172  * @return      ZStatus_t
// 1173  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1174 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinDirect:
          CFI Block cfiBlock170 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinDirect
        CODE
// 1175 {
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1176   ZStatus_t status;
// 1177 
// 1178   status = ZDSecMgrDeviceJoin( device );
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
        MOV     A,R1
        MOV     ?V0,A
// 1179 
// 1180   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoinDirect_0
// 1181   {
// 1182     // set association status to authenticated
// 1183     ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithShort
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine57_0 & 0xFFFF
// 1184   }
??CrossCallReturnLabel_114:
        LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 1185 
// 1186   return status;
??ZDSecMgrDeviceJoinDirect_0:
        MOV     R1,?V0
        LJMP    ??Subroutine63_0 & 0xFFFF
// 1187 }
          CFI EndBlock cfiBlock170
// 1188 
// 1189 /******************************************************************************
// 1190  * @fn          ZDSecMgrDeviceJoinFwd
// 1191  *
// 1192  * @brief       Forward join to Trust Center.
// 1193  *
// 1194  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1195  *
// 1196  * @return      ZStatus_t
// 1197  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1198 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinFwd:
          CFI Block cfiBlock171 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinFwd
        CODE
// 1199 {
        FUNCALL ZDSecMgrDeviceJoinFwd, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 1200   ZStatus_t               status;
// 1201   APSME_UpdateDeviceReq_t req;
// 1202 
// 1203   // forward any joining device to the Trust Center -- the Trust Center will
// 1204   // decide if the device is allowed to join
// 1205   status = ZSuccess;
// 1206 
// 1207   // forward authorization to the Trust Center
// 1208   req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine43 & 0xFFFF
// 1209   req.devAddr    = device->nwkAddr;
??CrossCallReturnLabel_58:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
// 1210   req.devExtAddr = device->extAddr;
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
// 1211 
// 1212   // set security status, option for router to reject if policy set
// 1213   if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
??CrossCallReturnLabel_135:
        MOV     A,R2
        ADD     A,#0x7
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??ZDSecMgrDeviceJoinFwd_0
// 1214   {
// 1215     if ( device->devStatus & DEV_REJOIN_STATUS )
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_1
// 1216     {
// 1217       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_2
// 1218       {
// 1219         req.status = APSME_UD_HIGH_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1220       }
// 1221       else
// 1222       {
// 1223         req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
??ZDSecMgrDeviceJoinFwd_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1224       }
// 1225     }
// 1226     else
// 1227     {
// 1228       req.status = APSME_UD_HIGH_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_1:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1229     }
// 1230   }
// 1231   else
// 1232   {
// 1233     if ( device->devStatus & DEV_REJOIN_STATUS )
??ZDSecMgrDeviceJoinFwd_0:
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_4
// 1234     {
// 1235       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_5
// 1236       {
// 1237         req.status = APSME_UD_STANDARD_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1238       }
// 1239       else
// 1240       {
// 1241         req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
??ZDSecMgrDeviceJoinFwd_5:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1242       }
// 1243     }
// 1244     else
// 1245     {
// 1246       req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_4:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
// 1247     }
// 1248   }
??ZDSecMgrDeviceJoinFwd_3:
        LCALL   ?Subroutine43 & 0xFFFF
// 1249 
// 1250   // set association status to authenticated
// 1251   ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
??CrossCallReturnLabel_59:
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 1252 
// 1253 #if defined ( APP_TP2_TEST_MODE )
// 1254   if ( guTxApsSecON == TRUE )
// 1255   {
// 1256     req.apsSecure = TRUE;
// 1257   }
// 1258   else
// 1259   {
// 1260     req.apsSecure = FALSE;
// 1261   }
// 1262 
// 1263   // send and APSME_UPDATE_DEVICE request to the trust center
// 1264   status = APSME_UpdateDeviceReq( &req );
// 1265 
// 1266 #else
// 1267   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1268   {
// 1269     // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
// 1270     // un-encrypted and one APS encrypted, to make sure that it can interoperate
// 1271     // with legacy Coordinator devices which can only handle one or the other.
// 1272     if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
        MOV     DPTR,#zgApsLinkKeyType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_6
// 1273     {
// 1274       req.apsSecure = FALSE;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine64_0 & 0xFFFF
// 1275 
// 1276       // send and APSME_UPDATE_DEVICE request to the trust center
// 1277       status = APSME_UpdateDeviceReq( &req );
// 1278     }
??CrossCallReturnLabel_164:
        LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
// 1279 
// 1280     // send the message APS encrypted
// 1281     req.apsSecure = TRUE;
??ZDSecMgrDeviceJoinFwd_6:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ??Subroutine64_0 & 0xFFFF
// 1282 
// 1283     // send and APSME_UPDATE_DEVICE request to the trust center
// 1284     status = APSME_UpdateDeviceReq( &req );
// 1285   }
// 1286   else
// 1287   {
// 1288     req.apsSecure = FALSE;
// 1289 
// 1290     // send and APSME_UPDATE_DEVICE request to the trust center
// 1291     status = APSME_UpdateDeviceReq( &req );
// 1292   }
// 1293 #endif
// 1294 
// 1295   return status;
??CrossCallReturnLabel_165:
        LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
        LJMP    ?Subroutine4 & 0xFFFF
// 1296 }
          CFI EndBlock cfiBlock171

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond172 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_0
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-4
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_1
          CFI (cfiCond176) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond176) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond176) CFA_SP SP+-9
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker177 Using cfiCommon1
          CFI (cfiPicker177) NoFunction
          CFI (cfiPicker177) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AssocGetWithShort
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiPicker177

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond178 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_122
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function APSME_LinkKeySet
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker181 Using cfiCommon1
          CFI (cfiPicker181) NoFunction
          CFI (cfiPicker181) Picker
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_61:
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiPicker181
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond182 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
          CFI Conditional ??CrossCallReturnLabel_119
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function APSME_KeyFwdToChild
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function APSME_LinkKeySet
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function APSME_LinkKeySet
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExt
          CFI Conditional ??CrossCallReturnLabel_102
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function ZDSecMgrEntryFree
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function ZDSecMgrEntryFree
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function ZDSecMgrEntryFree
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function ZDSecMgrAppKeyGet
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond193) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond193) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond193) CFA_SP SP+-7
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function ZDSecMgrAppKeyReq
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function ZDSecMgrAppKeyReq
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 59)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function ZDSecMgrDeviceRemoveByExtAddr
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function ZDSecMgrDeviceRemove
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function ZDSecMgrDeviceRemove
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-2
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function ZDSecMgrDeviceJoin
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function ZDSecMgrDeviceJoin
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function APSME_IsLinkKeyValid
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function ZDSecMgrAddLinkKey
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function ZDSecMgrDeviceRemove
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function APSME_KeyFwdToChild
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function APSME_LinkKeySet
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function APSME_LinkKeySet
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker212 Using cfiCommon1
          CFI (cfiPicker212) NoFunction
          CFI (cfiPicker212) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiPicker212
// 1297 
// 1298 /******************************************************************************
// 1299  * @fn          ZDSecMgrDeviceNew
// 1300  *
// 1301  * @brief       Process a new device.
// 1302  *
// 1303  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1304  *
// 1305  * @return      ZStatus_t
// 1306  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1307 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
ZDSecMgrDeviceNew:
          CFI Block cfiBlock213 Using cfiCommon0
          CFI Function ZDSecMgrDeviceNew
        CODE
// 1308 {
        FUNCALL ZDSecMgrDeviceNew, ZDSecMgrDeviceJoinDirect
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1309   ZStatus_t status;
// 1310 
// 1311   if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1312       || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
// 1313   {
// 1314     // try to join this device
// 1315     status = ZDSecMgrDeviceJoinDirect( joiner );
// 1316   }
// 1317   else
// 1318   {
// 1319     status = ZDSecMgrDeviceJoinFwd( joiner );
// 1320   }
// 1321 
// 1322   return status;
        ; Setup parameters for call to function ZDSecMgrDeviceJoinDirect
        LCALL   `??ZDSecMgrDeviceJoinDirect::?relay`; Banked call to: ZDSecMgrDeviceJoinDirect
        SJMP    ??Subroutine59_0
// 1323 }
          CFI EndBlock cfiBlock213
// 1324 
// 1325 /******************************************************************************
// 1326  * @fn          ZDSecMgrAssocDeviceAuth
// 1327  *
// 1328  * @brief       Set associated device status to authenticated
// 1329  *
// 1330  * @param       assoc - [in, out] associated_devices_t
// 1331  *
// 1332  * @return      none
// 1333  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1334 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
ZDSecMgrAssocDeviceAuth:
          CFI Block cfiBlock214 Using cfiCommon0
          CFI Function ZDSecMgrAssocDeviceAuth
        CODE
// 1335 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1336   if ( assoc != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDSecMgrAssocDeviceAuth_0
// 1337   {
// 1338     assoc->devStatus |= DEV_SEC_AUTH_STATUS;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
        MOVX    @DPTR,A
// 1339   }
// 1340 }
??ZDSecMgrAssocDeviceAuth_0:
        SJMP    ??Subroutine59_0
          CFI EndBlock cfiBlock214
// 1341 
// 1342 /******************************************************************************
// 1343  * @fn          ZDSecMgrAuthNwkKey
// 1344  *
// 1345  * @brief       Handle next step in authentication process
// 1346  *
// 1347  * @param       none
// 1348  *
// 1349  * @return      none
// 1350  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1351 void ZDSecMgrAuthNwkKey()
ZDSecMgrAuthNwkKey:
          CFI Block cfiBlock215 Using cfiCommon0
          CFI Function ZDSecMgrAuthNwkKey
        CODE
// 1352 {
        FUNCALL ZDSecMgrAuthNwkKey, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1353   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthNwkKey_0
// 1354   {
// 1355     // inform ZDO that device has been authenticated
// 1356     osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1357   }
// 1358 }
??ZDSecMgrAuthNwkKey_0:
        SJMP    ??Subroutine59_0
          CFI EndBlock cfiBlock215

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock216 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 8)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0x8
          CFI EndBlock cfiBlock216
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiBlock217 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 4)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock217
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiBlock218 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock218
// 1359 
// 1360 /******************************************************************************
// 1361  * PUBLIC FUNCTIONS
// 1362  */
// 1363 /******************************************************************************
// 1364  * @fn          ZDSecMgrInit
// 1365  *
// 1366  * @brief       Initialize ZigBee Device Security Manager.
// 1367  *
// 1368  * @param       state - device initialization state
// 1369  *
// 1370  * @return      none
// 1371  */
// 1372 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 1373 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
// 1374 void ZDSecMgrAddrMgrCB( uint8           update,
// 1375                         AddrMgrEntry_t* newEntry,
// 1376                         AddrMgrEntry_t* oldEntry )
// 1377 {
// 1378   (void)update;
// 1379   (void)newEntry;
// 1380   (void)oldEntry;
// 1381 }
// 1382 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 1383 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1384 void ZDSecMgrInit(uint8 state)
ZDSecMgrInit:
          CFI Block cfiBlock219 Using cfiCommon0
          CFI Function ZDSecMgrInit
        CODE
// 1385 {
        FUNCALL ZDSecMgrInit, ZDSecMgrEntryInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInit, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInit, APSME_SetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInit, SSP_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInit, APSME_SecurityCM_CD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1386   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1387   {
// 1388     // initialize sub modules
// 1389     ZDSecMgrEntryInit(state);
        ; Setup parameters for call to function ZDSecMgrEntryInit
        LCALL   `??ZDSecMgrEntryInit::?relay`; Banked call to: ZDSecMgrEntryInit
// 1390 
// 1391     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1392     {
// 1393       APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function APSME_SetRequest
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x55
        LCALL   `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
// 1394     }
// 1395 
// 1396     // register with Address Manager
// 1397 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 1398     AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
// 1399 #endif
// 1400   }
// 1401 
// 1402   if ( ZG_SECURE_ENABLED )
// 1403   {
// 1404     if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1405          || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
// 1406     {
// 1407       // setup joining permissions
// 1408       ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1409       ZDSecMgrPermitJoiningTimed   = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        CLR     A
        MOVX    @DPTR,A
// 1410     }
// 1411   }
// 1412 
// 1413   // configure security based on security mode and type of device
// 1414   ZDSecMgrConfig();
        ; Setup parameters for call to function SSP_Init
        LCALL   `??SSP_Init::?relay` ; Banked call to: SSP_Init
        ; Setup parameters for call to function APSME_SecurityCM_CD
        LCALL   `??APSME_SecurityCM_CD::?relay`; Banked call to: APSME_SecurityCM_CD
// 1415 }
        LJMP    ??Subroutine70_0 & 0xFFFF
          CFI EndBlock cfiBlock219
// 1416 
// 1417 /******************************************************************************
// 1418  * @fn          ZDSecMgrConfig
// 1419  *
// 1420  * @brief       Configure ZigBee Device Security Manager.
// 1421  *
// 1422  * @param       none
// 1423  *
// 1424  * @return      none
// 1425  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1426 void ZDSecMgrConfig( void )
ZDSecMgrConfig:
          CFI Block cfiBlock220 Using cfiCommon0
          CFI Function ZDSecMgrConfig
        CODE
// 1427 {
        FUNCALL ZDSecMgrConfig, SSP_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrConfig, APSME_SecurityCM_CD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1428   if ( ZG_SECURE_ENABLED )
// 1429   {
// 1430     SSP_Init();
        ; Setup parameters for call to function SSP_Init
        LCALL   `??SSP_Init::?relay` ; Banked call to: SSP_Init
// 1431 
// 1432     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1433     {
// 1434       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1435       {
// 1436         // COMMERCIAL MODE - COORDINATOR DEVICE
// 1437         APSME_SecurityCM_CD();
        ; Setup parameters for call to function APSME_SecurityCM_CD
        LCALL   `??APSME_SecurityCM_CD::?relay`; Banked call to: APSME_SecurityCM_CD
// 1438       }
// 1439       else if ( ZSTACK_ROUTER_BUILD )
// 1440       {
// 1441         // COMMERCIAL MODE - ROUTER DEVICE
// 1442         APSME_SecurityCM_RD();
// 1443       }
// 1444       else
// 1445       {
// 1446         // COMMERCIAL MODE - END DEVICE
// 1447         APSME_SecurityCM_ED();
// 1448       }
// 1449     }
// 1450     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1451     {
// 1452       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1453       {
// 1454         // RESIDENTIAL MODE - COORDINATOR DEVICE
// 1455         APSME_SecurityRM_CD();
// 1456       }
// 1457       else if ( ZSTACK_ROUTER_BUILD )
// 1458       {
// 1459         // RESIDENTIAL MODE - ROUTER DEVICE
// 1460         APSME_SecurityRM_RD();
// 1461       }
// 1462       else
// 1463       {
// 1464         // RESIDENTIAL MODE - END DEVICE
// 1465         APSME_SecurityRM_ED();
// 1466       }
// 1467     }
// 1468   }
// 1469   else
// 1470   {
// 1471     // NO SECURITY
// 1472     APSME_SecurityNM();
// 1473   }
// 1474 }
        SJMP    ??Subroutine59_0
          CFI EndBlock cfiBlock220
// 1475 
// 1476 /******************************************************************************
// 1477  * @fn          ZDSecMgrPermitJoining
// 1478  *
// 1479  * @brief       Process request to change joining permissions.
// 1480  *
// 1481  * @param       duration - [in] timed duration for join in seconds
// 1482  *                         - 0x00 not allowed
// 1483  *                         - 0xFF allowed without timeout
// 1484  *
// 1485  * @return      uint8 - success(TRUE:FALSE)
// 1486  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1487 uint8 ZDSecMgrPermitJoining( uint8 duration )
ZDSecMgrPermitJoining:
          CFI Block cfiBlock221 Using cfiCommon0
          CFI Function ZDSecMgrPermitJoining
        CODE
// 1488 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
// 1489   uint8 accept;
// 1490 
// 1491   ZDSecMgrPermitJoiningTimed = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        CLR     A
        MOVX    @DPTR,A
// 1492 
// 1493   if ( duration > 0 )
        MOV     A,R0
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        JZ      ??ZDSecMgrPermitJoining_0
// 1494   {
// 1495     ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1496 
// 1497     if ( duration != 0xFF )
        MOV     A,#-0x1
        XRL     A,R0
        JZ      ??ZDSecMgrPermitJoining_1
// 1498     {
// 1499       ZDSecMgrPermitJoiningTimed = TRUE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOV     A,#0x1
        SJMP    ??ZDSecMgrPermitJoining_2
// 1500     }
// 1501   }
// 1502   else
// 1503   {
// 1504     ZDSecMgrPermitJoiningEnabled = FALSE;
??ZDSecMgrPermitJoining_0:
        CLR     A
??ZDSecMgrPermitJoining_2:
        MOVX    @DPTR,A
// 1505   }
// 1506 
// 1507   accept = TRUE;
// 1508 
// 1509   return accept;
??ZDSecMgrPermitJoining_1:
        MOV     R1,#0x1
        SJMP    ??Subroutine59_0
// 1510 }
          CFI EndBlock cfiBlock221
// 1511 
// 1512 /******************************************************************************
// 1513  * @fn          ZDSecMgrPermitJoiningTimeout
// 1514  *
// 1515  * @brief       Process permit joining timeout
// 1516  *
// 1517  * @param       none
// 1518  *
// 1519  * @return      none
// 1520  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1521 void ZDSecMgrPermitJoiningTimeout( void )
ZDSecMgrPermitJoiningTimeout:
          CFI Block cfiBlock222 Using cfiCommon0
          CFI Function ZDSecMgrPermitJoiningTimeout
        CODE
// 1522 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1523   if ( ZDSecMgrPermitJoiningTimed == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrPermitJoiningTimeout_0
// 1524   {
// 1525     ZDSecMgrPermitJoiningEnabled = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        CLR     A
        MOVX    @DPTR,A
// 1526     ZDSecMgrPermitJoiningTimed   = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
// 1527   }
// 1528 }
??ZDSecMgrPermitJoiningTimeout_0:
        SJMP    ??Subroutine59_0
          CFI EndBlock cfiBlock222
// 1529 
// 1530 /******************************************************************************
// 1531  * @fn          ZDSecMgrNewDeviceEvent
// 1532  *
// 1533  * @brief       Process a the new device event, if found reset new device
// 1534  *              event/timer.
// 1535  *
// 1536  * @param       ShortAddr - of New Device to process
// 1537  *
// 1538  * @return      uint8 - found(TRUE:FALSE)
// 1539  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1540 uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
ZDSecMgrNewDeviceEvent:
          CFI Block cfiBlock223 Using cfiCommon0
          CFI Function ZDSecMgrNewDeviceEvent
        CODE
// 1541 {
        FUNCALL ZDSecMgrNewDeviceEvent, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrDeviceNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AssocRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
// 1542   uint8                 found;
// 1543   ZDSecMgrDevice_t      device;
// 1544   AddrMgrEntry_t        addrEntry;
// 1545   associated_devices_t* assoc;
// 1546   ZStatus_t             status;
// 1547 
// 1548   // initialize return results
// 1549   found = FALSE;
        MOV     ?V0,#0x0
// 1550 
// 1551   assoc = AssocGetWithShort( ShortAddr );
        ; Setup parameters for call to function AssocGetWithShort
        LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1552 
// 1553   if ( assoc != NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
// 1554   {
// 1555     // device found
// 1556     found = TRUE;
        MOV     ?V0,#0x1
// 1557 
// 1558     // check for preconfigured security
// 1559     if ( zgPreConfigKeys == TRUE )
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrNewDeviceEvent_1
// 1560     {
// 1561       // set association status to authenticated
// 1562       ZDSecMgrAssocDeviceAuth( assoc );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 1563     }
// 1564 
// 1565     // set up device info
// 1566     addrEntry.user  = ADDRMGR_USER_DEFAULT;
??ZDSecMgrNewDeviceEvent_1:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine22 & 0xFFFF
// 1567     addrEntry.index = assoc->addrIdx;
??CrossCallReturnLabel_13:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
// 1568     AddrMgrEntryGet( &addrEntry );
??CrossCallReturnLabel_136:
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
// 1569 
// 1570     device.nwkAddr    = assoc->shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine21 & 0xFFFF
// 1571     device.extAddr    = addrEntry.extAddr;
??CrossCallReturnLabel_143:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
// 1572     device.parentAddr = NLME_GetShortAddr();
??CrossCallReturnLabel_137:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
// 1573 
// 1574     // the new device performed Secured Rejoin
// 1575     if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
// 1576          ( assoc->devStatus & DEV_REJOIN_STATUS ) )
??CrossCallReturnLabel_18:
        MOV     A,R6
        ADD     A,#0x5
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,#0x60
        XRL     A,#0x60
        JNZ     ??ZDSecMgrNewDeviceEvent_2
// 1577     {
// 1578       device.secure     = TRUE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrNewDeviceEvent_3
// 1579     }
// 1580     else
// 1581     {
// 1582       device.secure     = FALSE;
??ZDSecMgrNewDeviceEvent_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
// 1583     }
??ZDSecMgrNewDeviceEvent_3:
        LCALL   ?Subroutine22 & 0xFFFF
// 1584     device.devStatus  = assoc->devStatus;
??CrossCallReturnLabel_14:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ??Subroutine64_0 & 0xFFFF
// 1585 
// 1586     // process new device
// 1587     status = ZDSecMgrDeviceNew( &device );
// 1588 
// 1589     if ( status == ZSuccess )
??CrossCallReturnLabel_166:
        LCALL   `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
        MOV     A,R1
        JNZ     ??ZDSecMgrNewDeviceEvent_4
// 1590     {
// 1591       assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
        MOVX    @DPTR,A
        SJMP    ??ZDSecMgrNewDeviceEvent_0
// 1592     }
// 1593     else
// 1594     {
// 1595       // Clear SECURITY bit from Address Manager
// 1596       ZDSecMgrAddrClear( addrEntry.extAddr );
??ZDSecMgrNewDeviceEvent_4:
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
// 1597 
// 1598       // Remove the Association completely
// 1599       AssocRemove( addrEntry.extAddr );
        ; Setup parameters for call to function AssocRemove
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
// 1600     }
// 1601   }
// 1602 
// 1603   return found;
??ZDSecMgrNewDeviceEvent_0:
        MOV     R1,?V0
        MOV     A,#0x15
        LJMP    ?Subroutine3 & 0xFFFF
// 1604 }
          CFI EndBlock cfiBlock223

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond224 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function ZDSecMgrExtAddrStore
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-2
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function APSME_TCLinkKeyLoad
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 61)
          CFI Block cfiPicker230 Using cfiCommon1
          CFI (cfiPicker230) NoFunction
          CFI (cfiPicker230) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiPicker230

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond231 Using cfiCommon0
          CFI Function ZDSecMgrNewDeviceEvent
          CFI Conditional ??CrossCallReturnLabel_143
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond232) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond232) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond232) CFA_SP SP+-7
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker234 Using cfiCommon1
          CFI (cfiPicker234) NoFunction
          CFI (cfiPicker234) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_64:
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiPicker234
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiCond235 Using cfiCommon0
          CFI Function ZDSecMgrAddrClear
          CFI Conditional ??CrossCallReturnLabel_125
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function ZDSecMgrAppKeyReq
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-2
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function ZDSecMgrAppKeyReq
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function ZDSecMgrAppKeyReq
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function ZDSecMgrAppKeyReq
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-2
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function ZDSecMgrSendNwkKey
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function ZDSecMgrSendNwkKey
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function ZDSecMgrSendNwkKey
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function ZDSecMgrDeviceRemove
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function ZDSecMgrDeviceJoin
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-2
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-2
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond249) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond249) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond249) CFA_SP SP+-7
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function ZDSecMgrUpdateNwkKey
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function APSME_LinkKeySet
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function ZDSecMgrAddLinkKey
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-2
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond254) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond254) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond254) CFA_SP SP+-7
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256
// 1605 
// 1606 /******************************************************************************
// 1607  * @fn          ZDSecMgrTCExtAddrCheck
// 1608  *
// 1609  * @brief       Verifies if received ext. address matches TC ext. address.
// 1610  *
// 1611  * @param       extAddr - Extended address to be verified.
// 1612  *
// 1613  * @return      TRUE - extended address matches
// 1614  *              FALSE - otherwise
// 1615  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1616 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
ZDSecMgrTCExtAddrCheck:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function ZDSecMgrTCExtAddrCheck
        CODE
// 1617 {
        FUNCALL ZDSecMgrTCExtAddrCheck, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCExtAddrCheck, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1618   uint8  lookup[Z_EXTADDR_LEN];
// 1619   APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
        ; Setup parameters for call to function APSME_GetRequest
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x55
        LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
// 1620   return osal_ExtAddrEqual( extAddr, lookup );
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
          CFI EndBlock cfiBlock257
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
// 1621 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiBlock258 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x8
        LJMP    ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock258
// 1622 
// 1623 /******************************************************************************
// 1624  * @fn          ZDSecMgrTCDataLoad
// 1625  *
// 1626  * @brief       Stores the address of TC into address manager.
// 1627  *
// 1628  * @param       extAddr - Extended address to be verified.
// 1629  *
// 1630  * @return      none
// 1631  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1632 void ZDSecMgrTCDataLoad( uint8* extAddr )
ZDSecMgrTCDataLoad:
          CFI Block cfiBlock259 Using cfiCommon0
          CFI Function ZDSecMgrTCDataLoad
        CODE
// 1633 {
        FUNCALL ZDSecMgrTCDataLoad, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1634   uint16 ami;
// 1635   AddrMgrEntry_t entry;
// 1636 
// 1637   // lookup using TC short address
// 1638   entry.user    = ADDRMGR_USER_DEFAULT;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1639   osal_cpyExtAddr( entry.extAddr, extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1640 
// 1641   // Verify if TC address has been added to Address Manager
// 1642   if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV     A,R1
        JNZ     ??ZDSecMgrTCDataLoad_0
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??ZDSecMgrTCDataLoad_0
// 1643   {
// 1644     ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
// 1645   }
// 1646 }
??ZDSecMgrTCDataLoad_0:
        MOV     A,#0xf
        LJMP    ??Subroutine69_0 & 0xFFFF
          CFI EndBlock cfiBlock259
// 1647 
// 1648 /******************************************************************************
// 1649  * @fn          ZDSecMgrTransportKeyInd
// 1650  *
// 1651  * @brief       Process the ZDO_TransportKeyInd_t message.
// 1652  *
// 1653  * @param       ind - [in] ZDO_TransportKeyInd_t indication
// 1654  *
// 1655  * @return      none
// 1656  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1657 void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
ZDSecMgrTransportKeyInd:
          CFI Block cfiBlock260 Using cfiCommon0
          CFI Function ZDSecMgrTransportKeyInd
        CODE
// 1658 {
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrUpdateTCAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAuthNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrWriteNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V2,R2
        MOV     ?V3,R3
// 1659   uint8 index;
// 1660   uint8 zgPreConfigKey[SEC_KEY_LEN];
// 1661 
// 1662   ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
        MOV     A,R2
        ADD     A,#0x16
        MOV     R6,A
        CLR     A
        ADDC    A,?V3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
// 1663   // check for distributed security
// 1664   if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
        ; Setup parameters for call to function osal_isbufset
        MOV     R4,#0x8
        MOV     R1,#-0x1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV     A,R1
        JZ      ??ZDSecMgrTransportKeyInd_0
// 1665   {
// 1666     ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1667   }
// 1668 
// 1669   // load Trust Center data if needed
// 1670   ZDSecMgrTCDataLoad( ind->srcExtAddr );
??ZDSecMgrTransportKeyInd_0:
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
// 1671 
// 1672   if ( ( ind->keyType == KEY_TYPE_NWK ) ||
// 1673        ( ind->keyType == 6            ) )
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V2
        ADD     A,#0x6
        MOV     ?V0,A
        CLR     A
        ADDC    A,?V3
        MOV     ?V1,A
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOV     A,#0x6
        XRL     A,R0
        JZ      $+5
        LJMP    ??ZDSecMgrTransportKeyInd_2 & 0xFFFF
// 1674   {
// 1675     // check for dummy NWK key (all zeros)
// 1676     for ( index = 0;
??ZDSecMgrTransportKeyInd_1:
        MOV     R2,#0x0
??ZDSecMgrTransportKeyInd_3:
        MOV     A,R2
        MOV     R0,A
        MOV     A,?V2
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_4
// 1677           ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
// 1678           index++ );
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??ZDSecMgrTransportKeyInd_3
// 1679 
// 1680     if ( index == SEC_KEY_LEN )
??ZDSecMgrTransportKeyInd_4:
        MOV     A,#0x10
        XRL     A,R2
        JNZ     ??ZDSecMgrTransportKeyInd_5
// 1681     {
// 1682       // load preconfigured key - once!!
// 1683       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_6
// 1684       {
// 1685         ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
// 1686         SSP_UpdateNwkKey( zgPreConfigKey, 0 );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 1687         SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1688 
// 1689         // clear local copy of key
// 1690         osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
        SJMP    ??ZDSecMgrTransportKeyInd_6
// 1691       }
// 1692     }
// 1693     else
// 1694     {
// 1695       SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
??ZDSecMgrTransportKeyInd_5:
        MOV     A,?V2
        ADD     A,#0x5
        MOV     R0,A
        CLR     A
        ADDC    A,?V3
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 1696       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_6
// 1697       {
// 1698         SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1699       }
// 1700     }
// 1701 
// 1702     // handle next step in authentication process
// 1703     ZDSecMgrAuthNwkKey();
??ZDSecMgrTransportKeyInd_6:
        ; Setup parameters for call to function ZDSecMgrAuthNwkKey
        LCALL   `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
        SJMP    ??ZDSecMgrTransportKeyInd_7
// 1704   }
// 1705   else if ( ind->keyType == KEY_TYPE_TC_LINK )
??ZDSecMgrTransportKeyInd_2:
        MOV     A,#0x4
        XRL     A,R0
        JZ      ??ZDSecMgrTransportKeyInd_7
// 1706   {
// 1707     // This should not happen because TCLK should not be Tx
// 1708   }
// 1709   else if ( ind->keyType == KEY_TYPE_APP_LINK )
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??ZDSecMgrTransportKeyInd_7
// 1710   {
// 1711     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1712     {
// 1713       uint16           ami;
// 1714       ZDSecMgrEntry_t* entry;
// 1715 
// 1716       // get the address index
// 1717       if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV     A,R1
        JZ      ??ZDSecMgrTransportKeyInd_8
// 1718       {
// 1719         // store new EXT address
// 1720         ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#-0x2
        MOV     R3,#-0x1
        LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
// 1721         ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
// 1722       }
// 1723 
// 1724       ZDSecMgrEntryLookupAMI( ami, &entry );
??ZDSecMgrTransportKeyInd_8:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
// 1725 
// 1726       if ( entry == NULL )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_154:
        JNZ     ??CrossCallReturnLabel_138
// 1727       {
// 1728         // get new entry
// 1729         if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_138
// 1730         {
// 1731           // finish setting up entry
// 1732           entry->ami = ami;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
// 1733         }
// 1734       }
??CrossCallReturnLabel_21:
        LCALL   ??Subroutine60_0 & 0xFFFF
// 1735 
// 1736       ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
??CrossCallReturnLabel_138:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
// 1737 
// 1738 #if defined NV_RESTORE
// 1739       ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
        ; Setup parameters for call to function ZDSecMgrWriteNV
        LCALL   `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
// 1740 #endif
// 1741     }
// 1742   }
// 1743 }
??ZDSecMgrTransportKeyInd_7:
        MOV     A,#0x14
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock260
// 1744 
// 1745 /******************************************************************************
// 1746  * @fn          ZDSecMgrUpdateDeviceInd
// 1747  *
// 1748  * @brief       Process the ZDO_UpdateDeviceInd_t message.
// 1749  *
// 1750  * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
// 1751  *
// 1752  * @return      none
// 1753  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1754 void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
ZDSecMgrUpdateDeviceInd:
          CFI Block cfiBlock261 Using cfiCommon0
          CFI Function ZDSecMgrUpdateDeviceInd
        CODE
// 1755 {
        FUNCALL ZDSecMgrUpdateDeviceInd, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 8)
// 1756   ZDSecMgrDevice_t device;
// 1757 
// 1758   device.nwkAddr    = ind->devAddr;
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        LCALL   ?Subroutine21 & 0xFFFF
// 1759   device.extAddr    = ind->devExtAddr;
??CrossCallReturnLabel_144:
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
// 1760   device.parentAddr = ind->srcAddr;
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
// 1761   device.devStatus  = DEV_SEC_INIT_STATUS;
??CrossCallReturnLabel_139:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1762   device.secure     = FALSE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1763 
// 1764   // Trust Center should identify the type of JOIN/REJOIN and
// 1765   // Transport the NWK key accordingly, it will only be transported for:
// 1766   //              APSME_UD_STANDARD_UNSECURED_JOIN
// 1767   //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
// 1768   if ( ind->status != APSME_UD_DEVICE_LEFT )
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        XRL     A,R0
        JZ      ??ZDSecMgrUpdateDeviceInd_0
// 1769   {
// 1770     if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
        MOV     A,R0
        JNZ     ??ZDSecMgrUpdateDeviceInd_1
// 1771     {
// 1772       device.devStatus &= ~DEV_SEC_INIT_STATUS;
// 1773       device.devStatus |=  DEV_SEC_AUTH_STATUS;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
// 1774       device.secure = TRUE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1775     }
// 1776 
// 1777     ZDSecMgrDeviceJoin( &device );
??ZDSecMgrUpdateDeviceInd_1:
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
// 1778   }
// 1779 }
??ZDSecMgrUpdateDeviceInd_0:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock261

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond262 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinFwd
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond263) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond263) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond263) CFA_SP SP+-7
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker264 Using cfiCommon1
          CFI (cfiPicker264) NoFunction
          CFI (cfiPicker264) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_60:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV     A,#0x4
        RET
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiPicker264
// 1780 
// 1781 /******************************************************************************
// 1782  * @fn          ZDSecMgrRemoveDeviceInd
// 1783  *
// 1784  * @brief       Process the ZDO_RemoveDeviceInd_t message.
// 1785  *
// 1786  * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
// 1787  *
// 1788  * @return      none
// 1789  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1790 void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
ZDSecMgrRemoveDeviceInd:
          CFI Block cfiBlock265 Using cfiCommon0
          CFI Function ZDSecMgrRemoveDeviceInd
        CODE
// 1791 {
        FUNCALL ZDSecMgrRemoveDeviceInd, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1792   ZDSecMgrDevice_t device;
// 1793 
// 1794   // only accept from Trust Center
// 1795   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_152:
        JNZ     ??ZDSecMgrRemoveDeviceInd_0
// 1796   {
// 1797     // look up NWK address
// 1798     if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
        MOV     A,R2
        ADD     A,#0x4
        MOV     R6,A
        CLR     A
        ADDC    A,R3
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrRemoveDeviceInd_0
// 1799     {
// 1800       device.parentAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine65_0 & 0xFFFF
// 1801       device.extAddr    = ind->childExtAddr;
// 1802 
// 1803       // remove device
// 1804       ZDSecMgrDeviceRemove( &device );
// 1805     }
// 1806   }
??CrossCallReturnLabel_174:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_167:
        LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
// 1807 }
??ZDSecMgrRemoveDeviceInd_0:
        LJMP    ?Subroutine8 & 0xFFFF
          CFI EndBlock cfiBlock265

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond266 Using cfiCommon0
          CFI Function ZDSecMgrTransportKeyInd
          CFI Conditional ??CrossCallReturnLabel_154
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function APSME_IsLinkKeyValid
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+-2
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function ZDSecMgrAddLinkKey
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_156
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-2
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-2
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker270 Using cfiCommon1
          CFI (cfiPicker270) NoFunction
          CFI (cfiPicker270) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiPicker270
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond271 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_146
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-2
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-2
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function ZDSecMgrEntryFree
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond274) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-2
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function ZDSecMgrEntryFree
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-2
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function ZDSecMgrDeviceJoin
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+-2
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_152
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-2
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function APSME_KeyFwdToChild
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-2
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_154
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function APSME_IsLinkKeyValid
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-2
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function ZDSecMgrAddLinkKey
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_156
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker283 Using cfiCommon1
          CFI (cfiPicker283) NoFunction
          CFI (cfiPicker283) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_160:
        ORL     A,R1
        RET
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiPicker283

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock284 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
          CFI EndBlock cfiBlock284
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiBlock285 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock285
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiBlock286 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock286
// 1808 
// 1809 /******************************************************************************
// 1810  * @fn          ZDSecMgrRequestKeyInd
// 1811  *
// 1812  * @brief       Process the ZDO_RequestKeyInd_t message.
// 1813  *
// 1814  * @param       ind - [in] ZDO_RequestKeyInd_t indication
// 1815  *
// 1816  * @return      none
// 1817  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1818 void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
ZDSecMgrRequestKeyInd:
          CFI Block cfiBlock287 Using cfiCommon0
          CFI Function ZDSecMgrRequestKeyInd
        CODE
// 1819 {
        FUNCALL ZDSecMgrRequestKeyInd, ZDSecMgrAppKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1820   if ( ind->keyType == KEY_TYPE_NWK )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??ZDSecMgrRequestKeyInd_0
// 1821   {
// 1822   }
// 1823   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??ZDSecMgrRequestKeyInd_0
// 1824   {
// 1825     ZDSecMgrAppKeyReq( ind );
        ; Setup parameters for call to function ZDSecMgrAppKeyReq
        LCALL   `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
// 1826   }
// 1827   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 1828   {
// 1829   }
// 1830   //else ignore
// 1831 }
??ZDSecMgrRequestKeyInd_0:
        LJMP    ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock287
// 1832 
// 1833 /******************************************************************************
// 1834  * @fn          ZDSecMgrSwitchKeyInd
// 1835  *
// 1836  * @brief       Process the ZDO_SwitchKeyInd_t message.
// 1837  *
// 1838  * @param       ind - [in] ZDO_SwitchKeyInd_t indication
// 1839  *
// 1840  * @return      none
// 1841  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1842 void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
ZDSecMgrSwitchKeyInd:
          CFI Block cfiBlock288 Using cfiCommon0
          CFI Function ZDSecMgrSwitchKeyInd
        CODE
// 1843 {
        FUNCALL ZDSecMgrSwitchKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchKeyInd, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1844   SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1845 
// 1846   // Save if nv
// 1847   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1848 }
        LJMP    ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock288
// 1849 
// 1850 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1851 /******************************************************************************
// 1852  * @fn          ZDSecMgrUpdateNwkKey
// 1853  *
// 1854  * @brief       Load a new NWK key and trigger a network update to the dstAddr.
// 1855  *
// 1856  * @param       key       - [in] new NWK key
// 1857  * @param       keySeqNum - [in] new NWK key sequence number
// 1858  *
// 1859  * @return      ZStatus_t
// 1860  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1861 ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
ZDSecMgrUpdateNwkKey:
          CFI Block cfiBlock289 Using cfiCommon0
          CFI Function ZDSecMgrUpdateNwkKey
        CODE
// 1862 {
        FUNCALL ZDSecMgrUpdateNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 26
        MOV     A,#-0x1a
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V1,R1
// 1863   ZStatus_t               status;
// 1864   APSME_TransportKeyReq_t req;
// 1865 
// 1866   // initialize common elements of local variables
// 1867   req.keyType   = KEY_TYPE_NWK;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1868 
// 1869   req.dstAddr   = dstAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 1870   req.keySeqNum = keySeqNum;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 1871   req.key       = key;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1872   req.extAddr   = NULL;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1873   req.nwkSecure = TRUE;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1874   req.tunnel    = NULL;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1875 
// 1876   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1877   {
// 1878     // Broadcast transport NWK key
// 1879     if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
// 1880         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
// 1881         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
        MOV     A,#-0x1
        XRL     A,R4
        JNZ     ??ZDSecMgrUpdateNwkKey_0
        MOV     A,#-0x1
        XRL     A,R5
??ZDSecMgrUpdateNwkKey_0:
        JZ      ??ZDSecMgrUpdateNwkKey_1
        MOV     A,#-0x4
        XRL     A,R4
        JNZ     ??ZDSecMgrUpdateNwkKey_2
        MOV     A,#-0x1
        XRL     A,R5
??ZDSecMgrUpdateNwkKey_2:
        JZ      ??ZDSecMgrUpdateNwkKey_1
        MOV     A,#-0x3
        XRL     A,R4
        JNZ     ??ZDSecMgrUpdateNwkKey_3
        MOV     A,#-0x1
        XRL     A,R5
??ZDSecMgrUpdateNwkKey_3:
        JNZ     ??ZDSecMgrUpdateNwkKey_4
// 1882     {
// 1883       req.apsSecure = FALSE;
??ZDSecMgrUpdateNwkKey_1:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrUpdateNwkKey_5
// 1884       status = APSME_TransportKeyReq( &req );
// 1885     }
// 1886     else
// 1887     {
// 1888       AddrMgrEntry_t          addrEntry;
// 1889 
// 1890       addrEntry.user = ADDRMGR_USER_SECURITY;
??ZDSecMgrUpdateNwkKey_4:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1891       addrEntry.nwkAddr = dstAddr;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 1892 
// 1893       status = ZFailure;
        MOV     ?V0,#0x1
// 1894 
// 1895       if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrUpdateNwkKey_6
// 1896       {
// 1897         req.extAddr = addrEntry.extAddr;
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
// 1898         req.apsSecure = TRUE;
??CrossCallReturnLabel_140:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
// 1899         status = APSME_TransportKeyReq( &req );
// 1900       }
// 1901     }
// 1902   }
??ZDSecMgrUpdateNwkKey_5:
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_168:
        LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
        MOV     A,R1
        MOV     ?V0,A
// 1903   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1904   {
// 1905     req.apsSecure = FALSE;
// 1906     status = APSME_TransportKeyReq( &req );
// 1907   }
// 1908 
// 1909   SSP_UpdateNwkKey( key, keySeqNum );
??ZDSecMgrUpdateNwkKey_6:
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 1910 
// 1911   // Save if nv
// 1912   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1913 
// 1914   return status;
        MOV     R1,?V0
        MOV     A,#0x1a
        LJMP    ??Subroutine69_0 & 0xFFFF
// 1915 }
          CFI EndBlock cfiBlock289

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond290 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_161
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function ZDSecMgrRequestAppKey
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_162
          CFI (cfiCond291) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond291) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond291) CFA_SP SP+-7
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 4)
          CFI Block cfiPicker292 Using cfiCommon1
          CFI (cfiPicker292) NoFunction
          CFI (cfiPicker292) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiPicker292
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiCond293 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
          CFI Conditional ??CrossCallReturnLabel_163
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+-2
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_165
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-2
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_166
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-2
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-2
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function ZDSecMgrUpdateNwkKey
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_168
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-2
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_169
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+-2
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function ZDSecMgrAPSRemove
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_170
          CFI (cfiCond300) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond300) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond300) CFA_SP SP+-7
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function ZDSecMgrEntryLookup
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_161
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-2
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function ZDSecMgrRequestAppKey
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_162
          CFI (cfiCond302) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond302) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond302) CFA_SP SP+-7
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 4)
          CFI Block cfiPicker303 Using cfiCommon1
          CFI (cfiPicker303) NoFunction
          CFI (cfiPicker303) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function APSME_RequestKeyReq
        ; Setup parameters for call to function NLME_LeaveReq
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        ; Setup parameters for call to function ZDSecMgrDeviceNew
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        ; Setup parameters for call to function APSME_TransportKeyReq
        ; Setup parameters for call to function APSME_SwitchKeyReq
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiPicker303
// 1916 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 1917 
// 1918 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1919 /******************************************************************************
// 1920  * @fn          ZDSecMgrSwitchNwkKey
// 1921  *
// 1922  * @brief       Causes the NWK key to switch via a network command to the dstAddr.
// 1923  *
// 1924  * @param       keySeqNum - [in] new NWK key sequence number
// 1925  *
// 1926  * @return      ZStatus_t
// 1927  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1928 ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
ZDSecMgrSwitchNwkKey:
          CFI Block cfiBlock304 Using cfiCommon0
          CFI Function ZDSecMgrSwitchNwkKey
        CODE
// 1929 {
        FUNCALL ZDSecMgrSwitchNwkKey, APSME_SwitchKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, APSME_SwitchKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R1
        MOV     R7,A
// 1930   ZStatus_t            status;
// 1931   APSME_SwitchKeyReq_t req;
// 1932 
// 1933   // initialize common elements of local variables
// 1934   req.dstAddr = dstAddr;
        LCALL   ?Subroutine17 & 0xFFFF
// 1935   req.keySeqNum = keySeqNum;
??CrossCallReturnLabel_172:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 1936 
// 1937   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1938   {
// 1939     // Broadcast switch NWK key
// 1940     if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
// 1941         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
// 1942         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     ??ZDSecMgrSwitchNwkKey_0
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrSwitchNwkKey_0:
        JZ      ??ZDSecMgrSwitchNwkKey_1
        MOV     A,#-0x4
        XRL     A,R2
        JNZ     ??ZDSecMgrSwitchNwkKey_2
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrSwitchNwkKey_2:
        JZ      ??ZDSecMgrSwitchNwkKey_1
        MOV     A,#-0x3
        XRL     A,R2
        JNZ     ??ZDSecMgrSwitchNwkKey_3
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrSwitchNwkKey_3:
        JNZ     ??ZDSecMgrSwitchNwkKey_4
// 1943     {
// 1944       req.apsSecure = FALSE;
??ZDSecMgrSwitchNwkKey_1:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrSwitchNwkKey_5
// 1945       status = APSME_SwitchKeyReq( &req );
// 1946     }
// 1947     else
// 1948     {
// 1949       AddrMgrEntry_t          addrEntry;
// 1950 
// 1951       addrEntry.user = ADDRMGR_USER_SECURITY;
??ZDSecMgrSwitchNwkKey_4:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1952       addrEntry.nwkAddr = dstAddr;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
// 1953 
// 1954       status = ZFailure;
??CrossCallReturnLabel_19:
        MOV     R6,#0x1
// 1955 
// 1956       if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrSwitchNwkKey_6
// 1957       {
// 1958         req.dstAddr = addrEntry.nwkAddr;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
// 1959         req.apsSecure = TRUE;
??CrossCallReturnLabel_145:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
// 1960         status = APSME_SwitchKeyReq( &req );
// 1961       }
// 1962     }
// 1963   }
??ZDSecMgrSwitchNwkKey_5:
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_169:
        LCALL   `??APSME_SwitchKeyReq::?relay`; Banked call to: APSME_SwitchKeyReq
        MOV     A,R1
        MOV     R6,A
// 1964   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1965   {
// 1966     req.apsSecure = FALSE;
// 1967     status = APSME_SwitchKeyReq( &req );
// 1968   }
// 1969 
// 1970   SSP_SwitchNwkKey( keySeqNum );
??ZDSecMgrSwitchNwkKey_6:
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     A,R7
        MOV     R1,A
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1971 
// 1972   // Save if nv
// 1973   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1974 
// 1975   return status;
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x11
        LJMP    ??Subroutine62_0 & 0xFFFF
// 1976 }
          CFI EndBlock cfiBlock304

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond305 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
          CFI Conditional ??CrossCallReturnLabel_171
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_172
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+-2
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function ZDSecMgrAPSRemove
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_173
          CFI (cfiCond307) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond307) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond307) CFA_SP SP+-7
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker308 Using cfiCommon1
          CFI (cfiPicker308) NoFunction
          CFI (cfiPicker308) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiPicker308
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiCond309 Using cfiCommon0
          CFI Function ZDSecMgrRemoveDeviceInd
          CFI Conditional ??CrossCallReturnLabel_174
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function ZDSecMgrDeviceRemove
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_171
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-2
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_172
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-2
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function ZDSecMgrAPSRemove
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_173
          CFI (cfiCond312) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond312) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond312) CFA_SP SP+-7
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker313 Using cfiCommon1
          CFI (cfiPicker313) NoFunction
          CFI (cfiPicker313) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiPicker313
// 1977 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 1978 
// 1979 /******************************************************************************
// 1980  * @fn          ZDSecMgrRequestAppKey
// 1981  *
// 1982  * @brief       Request an application key with partner.
// 1983  *
// 1984  * @param       partExtAddr - [in] partner extended address
// 1985  *
// 1986  * @return      ZStatus_t
// 1987  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1988 ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
ZDSecMgrRequestAppKey:
          CFI Block cfiBlock314 Using cfiCommon0
          CFI Function ZDSecMgrRequestAppKey
        CODE
// 1989 {
        FUNCALL ZDSecMgrRequestAppKey, APSME_RequestKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 4)
// 1990   ZStatus_t status;
// 1991   APSME_RequestKeyReq_t req;
// 1992 
// 1993   req.dstAddr = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 1994   req.keyType = KEY_TYPE_APP_MASTER;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1995 
// 1996   req.partExtAddr = partExtAddr;
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
// 1997   status = APSME_RequestKeyReq( &req );
// 1998 
// 1999   return status;
??CrossCallReturnLabel_162:
        LCALL   `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
        MOV     A,#0x4
        LJMP    ??Subroutine58_0 & 0xFFFF
// 2000 }
          CFI EndBlock cfiBlock314
// 2001 
// 2002 #if ( ZG_BUILD_JOINING_TYPE )
// 2003 /******************************************************************************
// 2004  * @fn          ZDSecMgrSetupPartner
// 2005  *
// 2006  * @brief       Setup for application key partner.
// 2007  *
// 2008  * @param       partNwkAddr - [in] partner network address
// 2009  *
// 2010  * @return      ZStatus_t
// 2011  */
// 2012 ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
// 2013 {
// 2014   AddrMgrEntry_t entry;
// 2015   ZStatus_t      status;
// 2016 
// 2017   status = ZFailure;
// 2018 
// 2019   // update the address manager
// 2020   entry.user    = ADDRMGR_USER_SECURITY;
// 2021   entry.nwkAddr = partNwkAddr;
// 2022   AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
// 2023 
// 2024   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 2025   {
// 2026     status = ZSuccess;
// 2027 
// 2028     // check for address discovery
// 2029     if ( partNwkAddr == INVALID_NODE_ADDR )
// 2030     {
// 2031       status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2032     }
// 2033     else if ( !AddrMgrExtAddrValid( partExtAddr ) )
// 2034     {
// 2035       status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2036     }
// 2037   }
// 2038 
// 2039   return status;
// 2040 }
// 2041 #endif // ( ZG_BUILD_JOINING_TYPE )
// 2042 
// 2043 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 2044 /******************************************************************************
// 2045  * @fn          ZDSecMgrAppKeyTypeSet
// 2046  *
// 2047  * @brief       Set application key type.
// 2048  *
// 2049  * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
// 2050  *                                                   KEY_TYPE_APP_LINK@3
// 2051  *
// 2052  * @return      ZStatus_t
// 2053  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2054 ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
ZDSecMgrAppKeyTypeSet:
          CFI Block cfiBlock315 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyTypeSet
        CODE
// 2055 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
// 2056   if ( keyType == KEY_TYPE_APP_LINK )
        MOV     A,#0x3
        XRL     A,R0
        MOV     DPTR,#ZDSecMgrAppKeyType
        JNZ     ??ZDSecMgrAppKeyTypeSet_0
// 2057   {
// 2058     ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
        MOV     A,#0x3
        SJMP    ??ZDSecMgrAppKeyTypeSet_1
// 2059   }
// 2060   else
// 2061   {
// 2062     ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
??ZDSecMgrAppKeyTypeSet_0:
        MOV     A,#0x2
// 2063   }
??ZDSecMgrAppKeyTypeSet_1:
        LJMP    ?Subroutine9 & 0xFFFF
// 2064 
// 2065   return ZSuccess;
// 2066 }
          CFI EndBlock cfiBlock315
// 2067 #endif
// 2068 
// 2069 /******************************************************************************
// 2070  * ZigBee Device Security Manager - Stub Implementations
// 2071  */
// 2072 
// 2073 
// 2074 /******************************************************************************
// 2075  * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
// 2076  *
// 2077  * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
// 2078  *
// 2079  * @param       extAddr - [in] EXT address
// 2080  * @param       data    - [in] APSME_LinkKeyData_t
// 2081  *
// 2082  * @return      ZStatus_t
// 2083  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2084 ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
APSME_LinkKeySet:
          CFI Block cfiBlock316 Using cfiCommon0
          CFI Function APSME_LinkKeySet
        CODE
// 2085 {
        FUNCALL APSME_LinkKeySet, ZDSecMgrEntryLookupExtGetIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2086   ZStatus_t status;
// 2087   ZDSecMgrEntry_t* entry;
// 2088   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 2089   uint16 Index;
// 2090 
// 2091   // lookup entry index for specified EXT address
// 2092   status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        LCALL   `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     ?V0,A
// 2093 
// 2094   if ( status == ZSuccess )
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_177 & 0xFFFF
// 2095   {
// 2096     // point to NV item
// 2097     entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x2
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_44:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine60_0 & 0xFFFF
// 2098 
// 2099     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
??CrossCallReturnLabel_141:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
// 2100 
// 2101     if (pApsLinkKey != NULL)
        MOV     A,R2
        ORL     A,?V3
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_177 & 0xFFFF
// 2102     {
// 2103       // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 2104       osal_nv_read( entry->keyNvId, 0,
// 2105                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V4,#0x18
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_122:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2106 
// 2107       // set new values of the key
// 2108       osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2109       pApsLinkKey->rxFrmCntr = 0;
        MOV     A,?V2
        ADD     A,#0x14
        LCALL   ?Subroutine14 & 0xFFFF
// 2110       pApsLinkKey->txFrmCntr = 0;
??CrossCallReturnLabel_178:
        MOV     A,?V2
        ADD     A,#0x10
        LCALL   ?Subroutine14 & 0xFFFF
// 2111 
// 2112       osal_nv_write( entry->keyNvId, 0,
// 2113                     sizeof(APSME_LinkKeyData_t), pApsLinkKey );
??CrossCallReturnLabel_179:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V4,#0x18
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_123:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2114 
// 2115       // clear copy of key in RAM
// 2116       osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2117 
// 2118       osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV     A,R0
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#ApsLinkKeyFrmCntr & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     A,R2
        ADD     A,#-0x9
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x13
        LCALL   ??Subroutine66_0 & 0xFFFF
// 2119 
// 2120       // set initial values for counters in RAM
// 2121       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
// 2122       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
??CrossCallReturnLabel_176:
        MOV     A,R2
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x13
        LCALL   ??Subroutine66_0 & 0xFFFF
// 2123     }
// 2124   }
// 2125 
// 2126   return status;
??CrossCallReturnLabel_177:
        MOV     R1,?V0
        MOV     A,#0x4
          CFI EndBlock cfiBlock316
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
// 2127 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock317 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock317

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond318 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExtGetIndex
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function APSME_LinkKeySet
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond319) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-2
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker320 Using cfiCommon1
          CFI (cfiPicker320) NoFunction
          CFI (cfiPicker320) Picker
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_67:
        RET
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiPicker320

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond321 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_178
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function APSME_LinkKeySet
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_179
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-2
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker323 Using cfiCommon1
          CFI (cfiPicker323) NoFunction
          CFI (cfiPicker323) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiPicker323
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiCond324 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_176
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function APSME_LinkKeySet
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_177
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond325) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond325) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+-2
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function APSME_LinkKeySet
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_178
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond326) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+-2
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function APSME_LinkKeySet
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_179
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond327) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+-2
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker328 Using cfiCommon1
          CFI (cfiPicker328) NoFunction
          CFI (cfiPicker328) Picker
        MOV     DPH,A
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiPicker328
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiCond329 Using cfiCommon0
          CFI Function APSME_TCLinkKeyInit
          CFI Conditional ??CrossCallReturnLabel_175
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function APSME_LinkKeySet
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_176
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond330) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+-2
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function APSME_LinkKeySet
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_177
          CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond331) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond331) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond331) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond331) CFA_SP SP+-2
          CFI (cfiCond331) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function APSME_LinkKeySet
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_178
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond332) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+-2
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function APSME_LinkKeySet
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_179
          CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond333) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond333) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond333) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond333) CFA_SP SP+-2
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker334 Using cfiCommon1
          CFI (cfiPicker334) NoFunction
          CFI (cfiPicker334) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiPicker334
// 2128 
// 2129 /******************************************************************************
// 2130  * @fn          ZDSecMgrAuthenticationSet
// 2131  *
// 2132  * @brief       Mark the specific device as authenticated or not
// 2133  *
// 2134  * @param       extAddr - [in] EXT address
// 2135  * @param       option  - [in] authenticated or not
// 2136  *
// 2137  * @return      ZStatus_t
// 2138  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2139 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
ZDSecMgrAuthenticationSet:
          CFI Block cfiBlock335 Using cfiCommon0
          CFI Function ZDSecMgrAuthenticationSet
        CODE
// 2140 {
        FUNCALL ZDSecMgrAuthenticationSet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
// 2141   ZStatus_t        status;
// 2142   ZDSecMgrEntry_t* entry;
// 2143 
// 2144 
// 2145   // lookup entry index for specified EXT address
// 2146   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV     A,R1
        MOV     R1,A
// 2147 
// 2148   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrAuthenticationSet_0
// 2149   {
// 2150     entry->authenticateOption = option;
        LCALL   ?Subroutine30 & 0xFFFF
// 2151   }
??CrossCallReturnLabel_29:
        MOV     A,R6
        MOVX    @DPTR,A
// 2152 
// 2153   return status;
??ZDSecMgrAuthenticationSet_0:
        LJMP    ?Subroutine7 & 0xFFFF
// 2154 }
          CFI EndBlock cfiBlock335
// 2155 
// 2156 /******************************************************************************
// 2157  * @fn          ZDSecMgrAuthenticationCheck
// 2158  *
// 2159  * @brief       Check if the specific device has been authenticated or not
// 2160  *              For non-trust center device, always return TRUE
// 2161  *
// 2162  * @param       shortAddr - [in] short address
// 2163  *
// 2164  * @return      TRUE @ authenticated with CBKE
// 2165  *              FALSE @ not authenticated
// 2166  */
// 2167 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2168 uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
ZDSecMgrAuthenticationCheck:
          CFI Block cfiBlock336 Using cfiCommon0
          CFI Function ZDSecMgrAuthenticationCheck
        CODE
// 2169 {
        FUNCALL ZDSecMgrAuthenticationCheck, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2170 #if defined (TC_LINKKEY_JOIN)
// 2171 
// 2172   ZDSecMgrEntry_t* entry;
// 2173   uint8 extAddr[Z_EXTADDR_LEN];
// 2174 
// 2175   // If the local device is not the trust center, always return TRUE
// 2176   APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
        ; Setup parameters for call to function APSME_GetRequest
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x55
        LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
// 2177   if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JZ      ??ZDSecMgrAuthenticationCheck_0
// 2178   {
// 2179     return TRUE;
// 2180   }
// 2181   // Otherwise, check the authentication option
// 2182   else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
        MOV     A,R1
        JZ      ??ZDSecMgrAuthenticationCheck_1
// 2183   {
// 2184     // lookup entry index for specified EXT address
// 2185     if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV     A,R1
        JNZ     ??ZDSecMgrAuthenticationCheck_2
// 2186     {
// 2187       if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
        LCALL   ?Subroutine30 & 0xFFFF
// 2188       {
// 2189         return TRUE;
// 2190       }
// 2191       else
// 2192       {
// 2193         return FALSE;
// 2194       }
// 2195     }
??CrossCallReturnLabel_30:
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrAuthenticationCheck_0
// 2196     else
// 2197     {
// 2198       // it may have been secured with TCLK only
// 2199       uint16    ami;
// 2200 
// 2201       // lookup address index in address manager
// 2202       if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
// 2203       {
// 2204         return TRUE;
// 2205       }
// 2206     }
// 2207   }
// 2208   return FALSE;
??ZDSecMgrAuthenticationCheck_1:
        MOV     R1,#0x0
??ZDSecMgrAuthenticationCheck_3:
        MOV     A,#0xc
        LJMP    ??Subroutine69_0 & 0xFFFF
??ZDSecMgrAuthenticationCheck_2:
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV     A,R1
        JNZ     ??ZDSecMgrAuthenticationCheck_1
??ZDSecMgrAuthenticationCheck_0:
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAuthenticationCheck_3
// 2209 
// 2210 #else
// 2211   (void)shortAddr;  // Intentionally unreferenced parameter
// 2212 
// 2213   // For non AMI/SE Profile, perform no check and always return TRUE.
// 2214   return TRUE;
// 2215 
// 2216 #endif // TC_LINKKEY_JOIN
// 2217 }
          CFI EndBlock cfiBlock336

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond337 Using cfiCommon0
          CFI Function ZDSecMgrAuthenticationSet
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function ZDSecMgrAuthenticationCheck
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+-2
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker339 Using cfiCommon1
          CFI (cfiPicker339) NoFunction
          CFI (cfiPicker339) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_62:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiPicker339
// 2218 
// 2219 /******************************************************************************
// 2220  * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
// 2221  *
// 2222  * @brief       Get Key NV ID for specified NWK address.
// 2223  *
// 2224  * @param       extAddr - [in] EXT address
// 2225  * @param       keyNvId - [out] NV ID
// 2226  *
// 2227  * @return      ZStatus_t
// 2228  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2229 ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
APSME_LinkKeyNVIdGet:
          CFI Block cfiBlock340 Using cfiCommon0
          CFI Function APSME_LinkKeyNVIdGet
        CODE
// 2230 {
        FUNCALL APSME_LinkKeyNVIdGet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2231   ZStatus_t status;
// 2232   ZDSecMgrEntry_t* entry;
// 2233 
// 2234   // lookup entry index for specified NWK address
// 2235   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV     A,R1
        MOV     R1,A
// 2236 
// 2237   if ( status == ZSuccess )
        JNZ     ??APSME_LinkKeyNVIdGet_0
// 2238   {
// 2239     // return the index to the NV table
// 2240     *pKeyNvId = entry->keyNvId;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine25 & 0xFFFF
// 2241   }
??CrossCallReturnLabel_124:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??APSME_LinkKeyNVIdGet_1
// 2242   else
// 2243   {
// 2244     *pKeyNvId = SEC_NO_KEY_NV_ID;
??APSME_LinkKeyNVIdGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??APSME_LinkKeyNVIdGet_1:
        MOVX    @DPTR,A
// 2245   }
// 2246 
// 2247   return status;
        LJMP    ?Subroutine7 & 0xFFFF
// 2248 }
          CFI EndBlock cfiBlock340
// 2249 
// 2250 /******************************************************************************
// 2251  * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
// 2252  *
// 2253  * @brief       Verifies if Link Key in NV has been set.
// 2254  *
// 2255  * @param       extAddr - [in] EXT address
// 2256  *
// 2257  * @return      TRUE - Link Key has been established
// 2258  *              FALSE - Link Key in NV has default value.
// 2259  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2260 uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
APSME_IsLinkKeyValid:
          CFI Block cfiBlock341 Using cfiCommon0
          CFI Function APSME_IsLinkKeyValid
        CODE
// 2261 {
        FUNCALL APSME_IsLinkKeyValid, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, APSME_LinkKeyNVIdGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2262   APSME_LinkKeyData_t *pKeyData;
// 2263   uint16 apsLinkKeyNvId;
// 2264   uint8 nullKey[SEC_KEY_LEN];
// 2265   uint8 status = FALSE;
        MOV     ?V0,#0x0
// 2266 
// 2267   // initialize default vealue to compare to
// 2268   osal_memset(nullKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2269 
// 2270   // check for APS link NV ID
// 2271   APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
        ; Setup parameters for call to function APSME_LinkKeyNVIdGet
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
// 2272 
// 2273   if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_155:
        JZ      ??APSME_IsLinkKeyValid_0
// 2274   {
// 2275     pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
// 2276 
// 2277     if (pKeyData != NULL)
        MOV     A,R2
        ORL     A,?V3
        JZ      ??APSME_IsLinkKeyValid_0
// 2278     {
// 2279       // retrieve key from NV
// 2280       if ( osal_nv_read( apsLinkKeyNvId, 0,
// 2281                         sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V4,#0x18
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??APSME_IsLinkKeyValid_1
// 2282       {
// 2283         // if stored key is different than default value, then a key has been established
// 2284         if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??APSME_IsLinkKeyValid_1
// 2285         {
// 2286           status = TRUE;
        MOV     ?V0,#0x1
// 2287         }
// 2288       }
// 2289 
// 2290       // clear copy of key in RAM
// 2291       osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
??APSME_IsLinkKeyValid_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2292 
// 2293       osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2294     }
// 2295   }
// 2296 
// 2297   return status;
??APSME_IsLinkKeyValid_0:
        MOV     R1,?V0
        MOV     A,#0x12
        LJMP    ?Subroutine5 & 0xFFFF
// 2298 }
          CFI EndBlock cfiBlock341
// 2299 
// 2300 /******************************************************************************
// 2301  * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
// 2302  *
// 2303  * @brief       Verify and process key transportation to child.
// 2304  *
// 2305  * @param       ind - [in] APSME_TransportKeyInd_t
// 2306  *
// 2307  * @return      uint8 - success(TRUE:FALSE)
// 2308  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2309 uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
APSME_KeyFwdToChild:
          CFI Block cfiBlock342 Using cfiCommon0
          CFI Function APSME_KeyFwdToChild
        CODE
// 2310 {
        FUNCALL APSME_KeyFwdToChild, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_KeyFwdToChild, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2311   // verify from Trust Center
// 2312   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_153:
        JNZ     ??APSME_KeyFwdToChild_0
// 2313   {
// 2314     // check for initial NWK key
// 2315     if ( ( ind->keyType == KEY_TYPE_NWK ) ||
// 2316          ( ind->keyType == 6            ) )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??APSME_KeyFwdToChild_1
        MOV     A,#0x6
        XRL     A,R0
        JNZ     ??APSME_KeyFwdToChild_2
// 2317     {
// 2318       // set association status to authenticated
// 2319       ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
??APSME_KeyFwdToChild_1:
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine56_0 & 0xFFFF
// 2320     }
??CrossCallReturnLabel_120:
        LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 2321 
// 2322     return TRUE;
??APSME_KeyFwdToChild_2:
        MOV     R1,#0x1
        SJMP    ??APSME_KeyFwdToChild_3
// 2323   }
// 2324 
// 2325   return FALSE;
??APSME_KeyFwdToChild_0:
        MOV     R1,#0x0
??APSME_KeyFwdToChild_3:
        LJMP    ??Subroutine70_0 & 0xFFFF
// 2326 }
          CFI EndBlock cfiBlock342
// 2327 
// 2328 /******************************************************************************
// 2329  * @fn          ZDSecMgrAddLinkKey
// 2330  *
// 2331  * @brief       Add the application link key to ZDSecMgr. Also mark the device
// 2332  *              as authenticated in the authenticateOption. Note that this function
// 2333  *              is hardwared to CBKE right now.
// 2334  *
// 2335  * @param       shortAddr - short address of the partner device
// 2336  * @param       extAddr - extended address of the partner device
// 2337  * @param       key - link key
// 2338  *
// 2339  * @return      ZStatus_t
// 2340  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2341 ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
ZDSecMgrAddLinkKey:
          CFI Block cfiBlock343 Using cfiCommon0
          CFI Function ZDSecMgrAddLinkKey
        CODE
// 2342 {
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAuthenticationSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrWriteNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2343   uint16           ami;
// 2344   ZDSecMgrEntry_t* entry;
// 2345 
// 2346   /* Store the device address in the addr manager */
// 2347   if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JZ      ??ZDSecMgrAddLinkKey_0
// 2348   {
// 2349     /* Adding to Addr Manager fails */
// 2350     return ZFailure;
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAddLinkKey_1
// 2351   }
// 2352 
// 2353   /* Lookup entry using specified address index */
// 2354   ZDSecMgrEntryLookupAMI( ami, &entry );
??ZDSecMgrAddLinkKey_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
// 2355 
// 2356   // If no existing entry, create one
// 2357   if ( entry == NULL )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_156:
        JNZ     ??CrossCallReturnLabel_142
// 2358   {
// 2359     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
        MOV     A,R1
        JNZ     ??ZDSecMgrAddLinkKey_2
// 2360     {
// 2361       entry->ami = ami;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
// 2362     }
??CrossCallReturnLabel_22:
        LCALL   ??Subroutine60_0 & 0xFFFF
// 2363     else
// 2364     {
// 2365       /* Security Manager full */
// 2366       return ZBufferFull;
// 2367     }
// 2368   }
// 2369   // Write the link key
// 2370   APSME_LinkKeySet( extAddr, key );
??CrossCallReturnLabel_142:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
// 2371 
// 2372 #if defined (TC_LINKKEY_JOIN)
// 2373   // Mark the device as authenticated.
// 2374   ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
        ; Setup parameters for call to function ZDSecMgrAuthenticationSet
        MOV     R1,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrAuthenticationSet::?relay`; Banked call to: ZDSecMgrAuthenticationSet
// 2375 #endif
// 2376 
// 2377 #if defined NV_RESTORE
// 2378   ZDSecMgrWriteNV();  // Write the new established link key to NV.
        ; Setup parameters for call to function ZDSecMgrWriteNV
        LCALL   `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
// 2379 #endif
// 2380 
// 2381   return ZSuccess;
        MOV     R1,#0x0
??ZDSecMgrAddLinkKey_1:
        MOV     A,#0x4
        LJMP    ??Subroutine69_0 & 0xFFFF
??ZDSecMgrAddLinkKey_2:
        MOV     R1,#0x11
        SJMP    ??ZDSecMgrAddLinkKey_1
// 2382 }
          CFI EndBlock cfiBlock343

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond344 Using cfiCommon0
          CFI Function ZDSecMgrTransportKeyInd
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function ZDSecMgrAddLinkKey
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond345) CFA_SP SP+-2
          CFI (cfiCond345) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker346 Using cfiCommon1
          CFI (cfiPicker346) NoFunction
          CFI (cfiPicker346) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_66:
        RET
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiPicker346

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond347 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExtGetIndex
          CFI Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond348 Using cfiCommon0
          CFI (cfiCond348) Function APSME_LinkKeySet
          CFI (cfiCond348) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_44
          CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond348) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond348) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond348) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond348) CFA_SP SP+-4
          CFI (cfiCond348) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_21
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-4
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function ZDSecMgrAddLinkKey
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_22
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+-4
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker351 Using cfiCommon1
          CFI (cfiPicker351) NoFunction
          CFI (cfiPicker351) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        RET
          CFI EndBlock cfiCond347
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiPicker351

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond352 Using cfiCommon0
          CFI Function ZDSecMgrNewDeviceEvent
          CFI Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_143
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond353 Using cfiCommon0
          CFI (cfiCond353) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond353) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_144
          CFI (cfiCond353) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond353) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond353) CFA_SP SP+-9
          CFI (cfiCond353) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond354 Using cfiCommon0
          CFI (cfiCond354) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond354) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_145
          CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond354) CFA_SP SP+-4
          CFI (cfiCond354) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond355 Using cfiCommon0
          CFI (cfiCond355) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond355) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_21
          CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond355) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond355) CFA_SP SP+-4
          CFI (cfiCond355) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond356 Using cfiCommon0
          CFI (cfiCond356) Function ZDSecMgrAddLinkKey
          CFI (cfiCond356) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_22
          CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond356) CFA_SP SP+-4
          CFI (cfiCond356) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker357 Using cfiCommon1
          CFI (cfiPicker357) NoFunction
          CFI (cfiPicker357) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond352
          CFI EndBlock cfiCond353
          CFI EndBlock cfiCond354
          CFI EndBlock cfiCond355
          CFI EndBlock cfiCond356
          CFI EndBlock cfiPicker357
// 2383 
// 2384 /******************************************************************************
// 2385  * @fn          ZDSecMgrInitNV
// 2386  *
// 2387  * @brief       Initialize the SecMgr entry data in NV with all values set to 0
// 2388  *
// 2389  * @param       none
// 2390  *
// 2391  * @return      uint8 - <osal_nv_item_init> return codes
// 2392  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2393 uint8 ZDSecMgrInitNV(void)
ZDSecMgrInitNV:
          CFI Block cfiBlock358 Using cfiCommon0
          CFI Function ZDSecMgrInitNV
        CODE
// 2394 {
        FUNCALL ZDSecMgrInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2395 
// 2396   uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
// 2397                 (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        MOV     R6,A
// 2398 
// 2399   // If the item does not already exist, set all values to 0
// 2400   if (rtrn != SUCCESS)
        JZ      ??ZDSecMgrInitNV_0
// 2401   {
// 2402     nvDeviceListHdr_t hdr;
// 2403     hdr.numRecs = 0;
        LCALL   ?Subroutine16 & 0xFFFF
// 2404     osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
// 2405   }
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2406 
// 2407   rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
// 2408                              zgApsTrustCenterAddr );
// 2409 
// 2410   return rtrn;
??ZDSecMgrInitNV_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0,#zgApsTrustCenterAddr & 0xff
        MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#0x71
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        ORL     A,R6
        MOV     R1,A
        MOV     A,#0x2
        LJMP    ??Subroutine69_0 & 0xFFFF
// 2411 }
          CFI EndBlock cfiBlock358
// 2412 
// 2413 #if defined ( NV_RESTORE )
// 2414 /*********************************************************************
// 2415  * @fn      ZDSecMgrWriteNV()
// 2416  *
// 2417  * @brief   Save off the APS link key list to NV
// 2418  *
// 2419  * @param   none
// 2420  *
// 2421  * @return  none
// 2422  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2423 static void ZDSecMgrWriteNV( void )
ZDSecMgrWriteNV:
          CFI Block cfiBlock359 Using cfiCommon0
          CFI Function ZDSecMgrWriteNV
        CODE
// 2424 {
        FUNCALL ZDSecMgrWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2425   uint16 i;
// 2426   nvDeviceListHdr_t hdr;
// 2427 
// 2428   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine11 & 0xFFFF
// 2429 
// 2430   if (ZDSecMgrEntries != NULL)
??CrossCallReturnLabel_88:
        JZ      ??ZDSecMgrWriteNV_0
// 2431   {
// 2432     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 2433     {
// 2434       // Save off the record
// 2435       osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 2436                     (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
// 2437                     sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
??ZDSecMgrWriteNV_1:
        MOV     ?V0,R6
        MOV     ?V1,R7
        MOV     A,?V0
        MOV     B,#0x5
        MUL     AB
        MOV     ?V0,A
        MOV     R0,B
        MOV     B,#0x5
        MOV     A,?V1
        MUL     AB
        ADD     A,R0
        MOV     ?V1,A
        ; Setup parameters for call to function osal_nv_write
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,?V0
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V1
        MOV     ?V3,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V2,#0x5
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2438 
// 2439       if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,?V0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrWriteNV_2
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrWriteNV_2:
        JZ      ??ZDSecMgrWriteNV_3
// 2440       {
// 2441         hdr.numRecs++;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine36 & 0xFFFF
// 2442       }
// 2443     }
??CrossCallReturnLabel_46:
        MOVX    @DPTR,A
??ZDSecMgrWriteNV_3:
        INC     R6
        MOV     A,R6
        JNZ     ??ZDSecMgrWriteNV_4
        INC     R7
??ZDSecMgrWriteNV_4:
        CLR     C
        SUBB    A,#0x3
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??ZDSecMgrWriteNV_1
// 2444   }
// 2445 
// 2446   // Save off the header
// 2447   osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
??ZDSecMgrWriteNV_0:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2448 }
        MOV     A,#0x2
          CFI EndBlock cfiBlock359
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock360 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 51)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock360
        REQUIRE ??Subroutine68_0
        ; // Fall through to label ??Subroutine68_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine68_0:
          CFI Block cfiBlock361 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock361

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond362 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond363 Using cfiCommon0
          CFI (cfiCond363) Function ZDSecMgrWriteNV
          CFI (cfiCond363) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond363) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond363) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond363) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond363) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond363) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond363) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond363) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond363) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond363) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond363) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond363) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond363) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond363) CFA_SP SP+-2
          CFI (cfiCond363) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker364 Using cfiCommon1
          CFI (cfiPicker364) NoFunction
          CFI (cfiPicker364) Picker
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        RET
          CFI EndBlock cfiCond362
          CFI EndBlock cfiCond363
          CFI EndBlock cfiPicker364
// 2449 #endif // NV_RESTORE
// 2450 
// 2451 #if defined ( NV_RESTORE )
// 2452 /******************************************************************************
// 2453  * @fn          ZDSecMgrRestoreFromNV
// 2454  *
// 2455  * @brief       Restore the APS Link Key entry data from NV. It does not restore
// 2456  *              the key data itself as they remain in NV until they are used.
// 2457  *              Only list data is restored.
// 2458  *              Restore zgTrustCenterAdress from NV.
// 2459  *
// 2460  * @param       none
// 2461  *
// 2462  * @return      None.
// 2463  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2464 static void ZDSecMgrRestoreFromNV( void )
ZDSecMgrRestoreFromNV:
          CFI Block cfiBlock365 Using cfiCommon0
          CFI Function ZDSecMgrRestoreFromNV
        CODE
// 2465 {
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 2466   nvDeviceListHdr_t hdr;
// 2467   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 2468 
// 2469   if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
// 2470       ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_157:
        JNZ     $+5
        LJMP    ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      $+5
        LJMP    ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
// 2471   {
// 2472     uint8 x;
// 2473 
// 2474     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
// 2475 
// 2476     for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
        MOV     ?V0,#0x0
        MOV     A,R2
        ADD     A,#0x10
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V9
        MOV     ?V3,A
// 2477     {
// 2478       if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
// 2479                         (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
// 2480                         sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
??ZDSecMgrRestoreFromNV_1:
        MOV     A,?V0
        MOV     B,#0x5
        MUL     AB
        MOV     R6,A
        MOV     R7,B
        ; Setup parameters for call to function osal_nv_read
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     ?V5,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V4,#0x5
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,?V0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     A,R7
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
// 2481       {
// 2482         // update data only for valid entries
// 2483         if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrRestoreFromNV_3
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrRestoreFromNV_3:
        JNZ     $+5
        LJMP    ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
// 2484         {
// 2485           if (pApsLinkKey != NULL)
        MOV     A,?V8
        ORL     A,?V9
        JNZ     $+5
        LJMP    ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
// 2486           {
// 2487             // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 2488             osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
// 2489                          sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V4,#0x18
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 2490 
// 2491             // set new values for the counter
// 2492             pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
        MOV     DPTR,#__Constant_3e9
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     R0,#?V4
        LCALL   ?L_ADD_TO_X
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_38:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#ApsLinkKeyFrmCntr & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?XLOAD_R0123
        MOV     A,R4
        ADD     A,#-0x9
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#-0x13
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 2493 
// 2494             // restore values for counters in RAM
// 2495             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
// 2496                                             pApsLinkKey->txFrmCntr;
// 2497 
// 2498             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
// 2499                                             pApsLinkKey->rxFrmCntr;
        MOV     A,?V8
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V9
        MOV     DPH,A
        LCALL   ?XLOAD_R0123
        MOV     A,R4
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#-0x13
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 2500 
// 2501             osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
// 2502                           sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V4,#0x18
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 2503 
// 2504             // clear copy of key in RAM
// 2505             osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2506           }
// 2507         }
// 2508       }
// 2509     }
??ZDSecMgrRestoreFromNV_2:
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDSecMgrRestoreFromNV_1 & 0xFFFF
// 2510 
// 2511     if (pApsLinkKey != NULL)
        MOV     A,?V8
        ORL     A,?V9
        JZ      ??ZDSecMgrRestoreFromNV_0
// 2512     {
// 2513       osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2514     }
// 2515   }
// 2516 
// 2517   osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
??ZDSecMgrRestoreFromNV_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#zgApsTrustCenterAddr & 0xff
        MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x71
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 2518 }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock365
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock366 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock366

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond367 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond368 Using cfiCommon0
          CFI (cfiCond368) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond368) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond368) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond368) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond368) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond368) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond368) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond368) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond368) CFA_SP SP+-2
          CFI (cfiCond368) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker369 Using cfiCommon1
          CFI (cfiPicker369) NoFunction
          CFI (cfiPicker369) Picker
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     DPL,R0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond367
          CFI EndBlock cfiCond368
          CFI EndBlock cfiPicker369
// 2519 #endif // NV_RESTORE
// 2520 
// 2521 /*********************************************************************
// 2522  * @fn          ZDSecMgrSetDefaultNV
// 2523  *
// 2524  * @brief       Write the defaults to NV for Entry table and for APS key data table
// 2525  *
// 2526  * @param       none
// 2527  *
// 2528  * @return      none
// 2529  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2530 void ZDSecMgrSetDefaultNV( void )
ZDSecMgrSetDefaultNV:
          CFI Block cfiBlock370 Using cfiCommon0
          CFI Function ZDSecMgrSetDefaultNV
        CODE
// 2531 {
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2532   uint16 i;
// 2533   nvDeviceListHdr_t hdr;
// 2534   ZDSecMgrEntry_t secMgrEntry;
// 2535   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 2536 
// 2537   // Initialize the header
// 2538   hdr.numRecs = 0;
        LCALL   ?Subroutine16 & 0xFFFF
// 2539 
// 2540   // clear the header
// 2541   osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2542 
// 2543   osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2544 
// 2545   for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 2546   {
// 2547     // Clear the record
// 2548     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 2549                 (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
// 2550                         sizeof(ZDSecMgrEntry_t), &secMgrEntry );
??ZDSecMgrSetDefaultNV_0:
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0,#0x5
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL   ?Subroutine37 & 0xFFFF
// 2551   }
??CrossCallReturnLabel_48:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        INC     R6
        MOV     A,R6
        JNZ     ??ZDSecMgrSetDefaultNV_1
        INC     R7
??ZDSecMgrSetDefaultNV_1:
        CLR     C
        SUBB    A,#0x3
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??ZDSecMgrSetDefaultNV_0
// 2552 
// 2553   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2554 
// 2555   if (pApsLinkKey != NULL)
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZDSecMgrSetDefaultNV_2
// 2556   {
// 2557     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2558 
// 2559     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 2560     {
// 2561       // Clear the record
// 2562       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 2563                     sizeof(APSME_LinkKeyData_t), pApsLinkKey);
??ZDSecMgrSetDefaultNV_3:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V2,#0x18
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x2
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2564     }
        INC     R6
        MOV     A,R6
        JNZ     ??ZDSecMgrSetDefaultNV_4
        INC     R7
??ZDSecMgrSetDefaultNV_4:
        CLR     C
        SUBB    A,#0x3
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??ZDSecMgrSetDefaultNV_3
// 2565 
// 2566     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2567   }
// 2568 }
??ZDSecMgrSetDefaultNV_2:
        MOV     A,#0x7
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock370

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond371 Using cfiCommon0
          CFI Function ZDSecMgrWriteNV
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond372 Using cfiCommon0
          CFI (cfiCond372) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond372) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond372) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond372) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond372) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond372) CFA_SP SP+-2
          CFI (cfiCond372) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker373 Using cfiCommon1
          CFI (cfiPicker373) NoFunction
          CFI (cfiPicker373) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_71:
        RET
          CFI EndBlock cfiCond371
          CFI EndBlock cfiCond372
          CFI EndBlock cfiPicker373

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond374 Using cfiCommon0
          CFI Function ZDSecMgrRestoreFromNV
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond375 Using cfiCommon0
          CFI (cfiCond375) Function ZDSecMgrWriteNV
          CFI (cfiCond375) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_47
          CFI (cfiCond375) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond375) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond375) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond375) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond375) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond375) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond375) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond375) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond375) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond375) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond375) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond375) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond375) CFA_SP SP+-4
          CFI (cfiCond375) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond376 Using cfiCommon0
          CFI (cfiCond376) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond376) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_48
          CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond376) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond376) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond376) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond376) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond376) CFA_SP SP+-4
          CFI (cfiCond376) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker377 Using cfiCommon1
          CFI (cfiPicker377) NoFunction
          CFI (cfiPicker377) Picker
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x4c
        MOV     R3,#0x0
        RET
          CFI EndBlock cfiCond374
          CFI EndBlock cfiCond375
          CFI EndBlock cfiCond376
          CFI EndBlock cfiPicker377

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond378 Using cfiCommon0
          CFI Function ZDSecMgrInitNV
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond379 Using cfiCommon0
          CFI (cfiCond379) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond379) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond379) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond379) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond379) CFA_SP SP+-2
          CFI (cfiCond379) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker380 Using cfiCommon1
          CFI (cfiPicker380) NoFunction
          CFI (cfiPicker380) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond378
          CFI EndBlock cfiCond379
          CFI EndBlock cfiPicker380
// 2569 
// 2570 #if defined ( NV_RESTORE )
// 2571 /*********************************************************************
// 2572  * @fn      ZDSecMgrUpdateNV()
// 2573  *
// 2574  * @brief   Updates one entry of the APS link key table to NV
// 2575  *
// 2576  * @param   index - to the entry in security manager table
// 2577  *
// 2578  * @return  none
// 2579  */
// 2580 static void ZDSecMgrUpdateNV( uint16 index )
// 2581 {
// 2582   nvDeviceListHdr_t hdr;
// 2583 
// 2584   if (ZDSecMgrEntries != NULL)
// 2585   {
// 2586     // Save off the record
// 2587     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 2588                    (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
// 2589                    sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
// 2590   }
// 2591 
// 2592   if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
// 2593   {
// 2594     if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
// 2595     {
// 2596       if (hdr.numRecs > 0)
// 2597       {
// 2598         hdr.numRecs--;
// 2599       }
// 2600     }
// 2601     else
// 2602     {
// 2603       hdr.numRecs++;
// 2604     }
// 2605 
// 2606     // Save off the header
// 2607     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
// 2608   }
// 2609 }
// 2610 #endif // NV_RESTORE
// 2611 
// 2612 /******************************************************************************
// 2613  * @fn          ZDSecMgrAPSRemove
// 2614  *
// 2615  * @brief       Remove device from network.
// 2616  *
// 2617  * @param       nwkAddr - device's NWK address
// 2618  * @param       extAddr - device's Extended address
// 2619  * @param       parentAddr - parent's NWK address
// 2620  *
// 2621  * @return      ZStatus_t
// 2622  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2623 ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
ZDSecMgrAPSRemove:
          CFI Block cfiBlock381 Using cfiCommon0
          CFI Function ZDSecMgrAPSRemove
        CODE
// 2624 {
        FUNCALL ZDSecMgrAPSRemove, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 8)
// 2625   ZDSecMgrDevice_t device;
// 2626 
// 2627   if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
// 2628        ( extAddr == NULL )              ||
// 2629        ( parentAddr == INVALID_NODE_ADDR ) )
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??ZDSecMgrAPSRemove_0
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrAPSRemove_0:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,R4
        ORL     A,R5
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDSecMgrAPSRemove_2
        MOV     A,#-0x1
        XRL     A,R1
??ZDSecMgrAPSRemove_2:
        JNZ     ??ZDSecMgrAPSRemove_3
// 2630   {
// 2631     return ( ZFailure );
??ZDSecMgrAPSRemove_1:
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAPSRemove_4
// 2632   }
// 2633 
// 2634   device.nwkAddr = nwkAddr;
??ZDSecMgrAPSRemove_3:
        LCALL   ?Subroutine17 & 0xFFFF
// 2635   device.extAddr = extAddr;
??CrossCallReturnLabel_173:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 2636   device.parentAddr = parentAddr;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ??Subroutine64_0 & 0xFFFF
// 2637 
// 2638   // remove device
// 2639   ZDSecMgrDeviceRemove( &device );
??CrossCallReturnLabel_170:
        LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
// 2640 
// 2641   return ( ZSuccess );
        MOV     R1,#0x0
??ZDSecMgrAPSRemove_4:
        LJMP    ?Subroutine2 & 0xFFFF
// 2642 }
          CFI EndBlock cfiBlock381
// 2643 
// 2644 /******************************************************************************
// 2645  * @fn          APSME_TCLinkKeyInit
// 2646  *
// 2647  * @brief       Initialize the NV table for preconfigured TC link key
// 2648  *
// 2649  *              When zgUseDefaultTCL is set to TRUE, the default preconfig
// 2650  *              Trust Center Link Key is written to NV. A single tclk is used
// 2651  *              by all devices joining the network.
// 2652  *
// 2653  * @param       setDefault - TRUE to set default values
// 2654  *
// 2655  * @return      none
// 2656  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2657 void APSME_TCLinkKeyInit(uint8 setDefault)
APSME_TCLinkKeyInit:
          CFI Block cfiBlock382 Using cfiCommon0
          CFI Function APSME_TCLinkKeyInit
        CODE
// 2658 {
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R1
        MOV     R6,A
// 2659   uint8             i;
// 2660   APSME_TCLinkKey_t tcLinkKey;
// 2661   uint8             rtrn;
// 2662 
// 2663   // Initialize all NV items for preconfigured TCLK
// 2664   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 2665   {
// 2666     // Making sure data is cleared for every key all the time
// 2667     osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2668 
// 2669     // Initialize first element of the table with the default TCLK
// 2670     if((i == 0) && ( zgUseDefaultTCLK == TRUE ))
        MOV     DPTR,#zgUseDefaultTCLK
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyInit_0
// 2671     {
// 2672       osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2673       osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#defaultTCLinkKey & 0xff
        MOV     ?V1,#(defaultTCLinkKey >> 8) & 0xff
        MOV     ?V2,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
// 2674     }
// 2675 
// 2676     // If the item doesn't exist in NV memory, create and initialize
// 2677     // it with the default value passed in, either defaultTCLK or 0
// 2678     rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
// 2679                                sizeof(APSME_TCLinkKey_t), &tcLinkKey);
// 2680 
// 2681     if (rtrn == SUCCESS)
??APSME_TCLinkKeyInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R1
        JZ      $+5
        LJMP    ??APSME_TCLinkKeyInit_1 & 0xFFFF
// 2682     {
// 2683       // set the Frame counters to 0 to existing keys in NV
// 2684       osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
// 2685                      sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0,#0x20
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
// 2686 
// 2687 #if defined ( NV_RESTORE )
// 2688       if (setDefault == TRUE)
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??APSME_TCLinkKeyInit_2
// 2689       {
// 2690         // clear the value stored in NV
// 2691         tcLinkKey.txFrmCntr = 0;
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine67_0 & 0xFFFF
// 2692       }
??CrossCallReturnLabel_175:
        SJMP    ??APSME_TCLinkKeyInit_3
// 2693       else
// 2694       {
// 2695         // increase the value stored in NV
// 2696         tcLinkKey.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
??APSME_TCLinkKeyInit_2:
        MOV     DPTR,#__Constant_b
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_ADD_TO_X
// 2697       }
// 2698 #else
// 2699       // Clear the counters if NV_RESTORE is not enabled and this NV item
// 2700       // already existed in the NV memory
// 2701       tcLinkKey.txFrmCntr = 0;
// 2702       tcLinkKey.rxFrmCntr = 0;
// 2703 #endif  // NV_RESTORE
// 2704 
// 2705       osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
// 2706                       sizeof(APSME_TCLinkKey_t), &tcLinkKey );
??APSME_TCLinkKeyInit_3:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0,#0x20
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
// 2707 
// 2708       // set initial values for counters in RAM
// 2709       TCLinkKeyFrmCntr[i].txFrmCntr = tcLinkKey.txFrmCntr;
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#TCLinkKeyFrmCntr
        LCALL   ?XSTORE_R0123
// 2710       TCLinkKeyFrmCntr[i].rxFrmCntr = tcLinkKey.rxFrmCntr;
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        LCALL   ?XSTORE_R0123
// 2711     }
// 2712   }
// 2713 
// 2714   // clear copy of key in RAM
// 2715   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeyInit_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2716 
// 2717 }
        MOV     A,#0x20
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock382
// 2718 
// 2719 /******************************************************************************
// 2720  * @fn          APSME_TCLinkKeySync
// 2721  *
// 2722  * @brief       Sync Trust Center LINK key data.
// 2723  *
// 2724  * @param       srcAddr - [in] srcAddr
// 2725  * @param       si      - [in, out] SSP_Info_t
// 2726  *
// 2727  * @return      ZStatus_t
// 2728  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2729 ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
APSME_TCLinkKeySync:
          CFI Block cfiBlock383 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
        CODE
// 2730 {
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
// 2731   uint8 i, selectedId = ZDSECMGR_TC_DEVICE_MAX;
// 2732   ZStatus_t status = ZSecNoKey;
        MOV     ?V2,#-0x5f
// 2733   APSME_TCLinkKey_t tcLinkKey;
// 2734   uint32 *tclkRxFrmCntr;
// 2735   uint16 originatorAddr = APSME_TRUSTCENTER_NWKADDR;
        MOV     ?V4,#0x0
        MOV     ?V5,#0x0
// 2736 
// 2737   // Look up the IEEE address of the trust center if it's available
// 2738   if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
        MOV     A,R4
        ADD     A,#0x6
        MOV     R6,A
        CLR     A
        ADDC    A,?V1
        MOV     R7,A
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_0
// 2739   {
// 2740     APSME_LookupExtAddr( srcAddr, si->extAddr );
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
        SJMP    ??APSME_TCLinkKeySync_1
// 2741   }
// 2742   else if ( osal_ExtAddrEqual( si->extAddr, _NIB.nwkCoordExtAddress ) )
??APSME_TCLinkKeySync_0:
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,#(_NIB + 25) & 0xff
        MOV     R5,#((_NIB + 25) >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JZ      ??APSME_TCLinkKeySync_1
// 2743   {
// 2744     originatorAddr = _NIB.nwkCoordAddress;
        MOV     DPTR,#_NIB + 23
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
// 2745     // in case originated not from our parent, use the default TC address
// 2746   }
// 2747 
// 2748   // Look up the TC link key associated with the device
// 2749   // or the default TC link key (extAddr is all FFs), whichever is found
// 2750   for ( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 2751   {
// 2752     // Read entry i of the TC link key table from NV
// 2753     osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
// 2754                  sizeof(APSME_TCLinkKey_t), &tcLinkKey );
??APSME_TCLinkKeySync_1:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V6,#0x20
        MOV     ?V7,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 2755 
// 2756     // prefer exact match over default
// 2757     if ( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_2
// 2758     {
// 2759       selectedId = i;
// 2760       // break from the loop
// 2761       break;
// 2762     }
// 2763     else if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
        MOV     A,R1
        JZ      ??APSME_TCLinkKeySync_3
// 2764     {
// 2765       if ( ( originatorAddr != APSME_TRUSTCENTER_NWKADDR ) && ( si->keyID == SEC_KEYID_TRANSPORT )
// 2766            && (i == 0) && ( zgUseDefaultTCLK == TRUE ) )
        MOV     A,?V4
        ORL     A,?V5
        JZ      ??APSME_TCLinkKeySync_2
        LCALL   ?Subroutine41 & 0xFFFF
// 2767       {
// 2768         //if a Key is received directly from an unusual TC,
// 2769         // don't use the first element of the table initialized with the default TCLK
// 2770         continue;
// 2771       }
// 2772       if ( selectedId == ZDSECMGR_TC_DEVICE_MAX )
// 2773       {
// 2774         selectedId = i;
// 2775       }
// 2776     }
// 2777   }
??CrossCallReturnLabel_53:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??APSME_TCLinkKeySync_2
        MOV     DPTR,#zgUseDefaultTCLK
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??APSME_TCLinkKeySync_3
// 2778 
// 2779   if ( selectedId < ZDSECMGR_TC_DEVICE_MAX )
// 2780   {
// 2781      // Only for UNIQUE keys, verify that the incoming frame counter is valid
// 2782     if ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY )
??APSME_TCLinkKeySync_2:
        MOV     A,?V0
        ADD     A,#0xf
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPTR,#zgApsLinkKeyType
        MOVX    A,@DPTR
        JNZ     ??APSME_TCLinkKeySync_4
// 2783     {
// 2784       tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
// 2785 
// 2786       if ( si->frmCntr >= *tclkRxFrmCntr )
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        MOV     R0,#?V0
        LCALL   ?UL_GE_X
        JNC     ??APSME_TCLinkKeySync_5
// 2787       {
// 2788         // set the keyNvId to use
// 2789         si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2790 
// 2791         // update the rx frame counter
// 2792         *tclkRxFrmCntr = si->frmCntr + 1;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
// 2793 
// 2794         status = ZSuccess;
        SJMP    ??APSME_TCLinkKeySync_6
// 2795       }
// 2796       else
// 2797       {
// 2798         status = ZSecOldFrmCount;
??APSME_TCLinkKeySync_5:
        MOV     ?V2,#-0x5e
        SJMP    ??APSME_TCLinkKeySync_3
// 2799       }
// 2800     }
// 2801     else
// 2802     {
// 2803       // set the keyNvId to use
// 2804       si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
??APSME_TCLinkKeySync_4:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2805 
// 2806       status = ZSuccess;
??APSME_TCLinkKeySync_6:
        MOV     ?V2,#0x0
// 2807     }
// 2808   }
// 2809 
// 2810   // clear copy of key in RAM
// 2811   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeySync_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2812 
// 2813   return status;
        MOV     R1,?V2
        MOV     A,#0x20
          CFI EndBlock cfiBlock383
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 2814 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock384 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock384
// 2815 
// 2816 /******************************************************************************
// 2817  * @fn          APSME_TCLinkKeyLoad
// 2818  *
// 2819  * @brief       Load Trust Center LINK key data.
// 2820  *
// 2821  * @param       dstAddr - [in] dstAddr
// 2822  * @param       si      - [in, out] SSP_Info_t
// 2823  *
// 2824  * @return      ZStatus_t
// 2825  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2826 ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
APSME_TCLinkKeyLoad:
          CFI Block cfiBlock385 Using cfiCommon0
          CFI Function APSME_TCLinkKeyLoad
        CODE
// 2827 {
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 45
        MOV     A,#-0x2d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 61)
        MOV     ?V0,R4
        MOV     ?V1,R5
// 2828   uint8 i;
// 2829   ZStatus_t status = ZSecNoKey;
        MOV     R6,#-0x5f
// 2830   APSME_TCLinkKey_t tcLinkKey;
// 2831   AddrMgrEntry_t addrEntry;
// 2832   uint32 *tclkTxFrmCntr;
// 2833   uint8 extAddrFound;
// 2834   uint8 defaultTCLKIdx = ZDSECMGR_TC_DEVICE_MAX;
// 2835 
// 2836   // Look up the ami of the srcAddr if available
// 2837   addrEntry.user    = ADDRMGR_USER_DEFAULT;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 2838   addrEntry.nwkAddr = dstAddr;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
// 2839 
// 2840   extAddrFound = AddrMgrExtAddrValid( si->extAddr );
??CrossCallReturnLabel_20:
        MOV     A,R4
        ADD     A,#0x6
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V3,A
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     R2,?V2
        MOV     R3,A
        LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV     A,R1
        MOV     R7,A
// 2841 
// 2842   // Look up the TC link key associated with the device
// 2843   // or the master TC link key (ami = 0xFFFF), whichever is found
// 2844   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 2845   {
// 2846     // Read entry i of the TC link key table from NV
// 2847     osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
// 2848                  sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 63)
        MOV     ?V4,#0x20
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 61)
// 2849 
// 2850     if( extAddrFound && AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
        MOV     A,R7
        JZ      ??APSME_TCLinkKeyLoad_0
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeyLoad_1
// 2851     {
// 2852       status = ZSuccess;
// 2853 
// 2854       break; // break from the loop
// 2855     }
// 2856 
// 2857     if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
??APSME_TCLinkKeyLoad_0:
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
        MOV     A,R1
        JZ      ??APSME_TCLinkKeyLoad_2
// 2858     {
// 2859       if ( !extAddrFound && ( !APSME_IsDistributedSecurity() ) )
        MOV     A,R7
        JNZ     ??APSME_TCLinkKeyLoad_1
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV     A,R1
// 2860       {
// 2861         status = ZSuccess;
// 2862 
// 2863         break; // break from the loop
// 2864       }
// 2865 
// 2866       // Remember the last default TCLK index
// 2867       defaultTCLKIdx = i;
// 2868     }
// 2869   }
// 2870 
// 2871   if ( (status != ZSuccess) && (defaultTCLKIdx < ZDSECMGR_TC_DEVICE_MAX) )
// 2872   {
// 2873     // Exact match was not found; use the last default TC Link Key
// 2874     i = defaultTCLKIdx;
// 2875     status = ZSuccess;
// 2876   }
// 2877 
// 2878   if ( status == ZSuccess )
??APSME_TCLinkKeyLoad_1:
        MOV     R6,#0x0
// 2879   {
// 2880     tclkTxFrmCntr = &TCLinkKeyFrmCntr[i].txFrmCntr;
// 2881 
// 2882     // set the keyNvId to use
// 2883     si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
        MOV     A,?V0
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2884 
// 2885     // update link key related fields
// 2886     si->keyID   = SEC_KEYID_LINK;
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_54:
        CLR     A
        MOVX    @DPTR,A
// 2887     si->frmCntr = *tclkTxFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr
        LCALL   ?XLOAD_R0123
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ?XSTORE_R0123
// 2888 
// 2889     // update outgoing frame counter
// 2890     (*tclkTxFrmCntr)++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#TCLinkKeyFrmCntr
        MOV     R0,#?V0
        LCALL   ?L_ADD_TO_X
// 2891 
// 2892 #if defined ( NV_RESTORE )
// 2893     // write periodically to NV
// 2894     if ( !(*tclkTxFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
        MOV     DPTR,#TCLinkKeyFrmCntr
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?UL_DIV_MOD
        MOV     A,?V4
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JNZ     ??APSME_TCLinkKeyLoad_3
// 2895     {
// 2896       // set the flag to write key to NV
// 2897       TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
        MOV     DPTR,#TCLinkKeyFrmCntr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2898 
// 2899       // Notify the ZDApp that the frame counter has changed.
// 2900       osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x4
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??APSME_TCLinkKeyLoad_3
??APSME_TCLinkKeyLoad_2:
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
// 2901     }
// 2902 #endif
// 2903   }
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyLoad_3
// 2904 
// 2905   // If no TC link key found, remove the device from the address manager
// 2906   if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
// 2907   {
// 2908     AddrMgrEntryRelease( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
// 2909   }
// 2910 
// 2911     // clear copy of key in RAM
// 2912   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeyLoad_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2913 
// 2914   return status;
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x2d
        LJMP    ?Subroutine1 & 0xFFFF
// 2915 }
          CFI EndBlock cfiBlock385

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond386 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond387 Using cfiCommon0
          CFI (cfiCond387) Function APSME_TCLinkKeyLoad
          CFI (cfiCond387) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond387) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond387) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond387) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond387) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond387) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond387) CFA_SP SP+-2
          CFI (cfiCond387) CFA_XSP16 add(XSP16, 61)
          CFI Block cfiPicker388 Using cfiCommon1
          CFI (cfiPicker388) NoFunction
          CFI (cfiPicker388) Picker
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond386
          CFI EndBlock cfiCond387
          CFI EndBlock cfiPicker388

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond389 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond390 Using cfiCommon0
          CFI (cfiCond390) Function APSME_TCLinkKeyLoad
          CFI (cfiCond390) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond390) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond390) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond390) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond390) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond390) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond390) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond390) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond390) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond390) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond390) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond390) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond390) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond390) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond390) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond390) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond390) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond390) CFA_SP SP+-2
          CFI (cfiCond390) CFA_XSP16 add(XSP16, 61)
          CFI Block cfiPicker391 Using cfiCommon1
          CFI (cfiPicker391) NoFunction
          CFI (cfiPicker391) Picker
        MOV     A,?V0
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond389
          CFI EndBlock cfiCond390
          CFI EndBlock cfiPicker391
// 2916 
// 2917 /******************************************************************************
// 2918  * @fn          APSME_IsDefaultTCLK
// 2919  *
// 2920  * @brief       Return TRUE or FALSE based on the extended address.  If the
// 2921  *              input ext address is all FFs, it means the trust center link
// 2922  *              assoiciated with the address is the default trust center link key
// 2923  *
// 2924  * @param       extAddr - [in] extended address
// 2925  *
// 2926  * @return      uint8 TRUE/FALSE
// 2927  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2928 uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
APSME_IsDefaultTCLK:
          CFI Block cfiBlock392 Using cfiCommon0
          CFI Function APSME_IsDefaultTCLK
        CODE
// 2929 {
        FUNCALL APSME_IsDefaultTCLK, osal_isbufset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2930   return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_isbufset
        MOV     R4,#0x8
        MOV     R1,#-0x1
        LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        LJMP    ??Subroutine59_0 & 0xFFFF
// 2931 }
          CFI EndBlock cfiBlock392
// 2932 
// 2933 /******************************************************************************
// 2934  * @fn          ZDSecMgrNwkKeyInit
// 2935  *
// 2936  * @brief       Initialize the NV items for
// 2937  *                  ZCD_NV_NWKKEY,
// 2938  *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
// 2939  *                  ZCD_NV_NWK_ALTERN_KEY_INFO
// 2940  *
// 2941  * @param       setDefault
// 2942  *
// 2943  * @return      none
// 2944  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2945 void ZDSecMgrNwkKeyInit(uint8 setDefault)
ZDSecMgrNwkKeyInit:
          CFI Block cfiBlock393 Using cfiCommon0
          CFI Function ZDSecMgrNwkKeyInit
        CODE
// 2946 {
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 38
        MOV     A,#-0x26
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        MOV     R6,A
// 2947   uint8 status;
// 2948   nwkKeyDesc nwkKey;
// 2949 
// 2950   // Initialize NV items for NWK key, this structure contains the frame counter
// 2951   // and is only used when NV_RESTORE is enabled
// 2952   nwkActiveKeyItems keyItems;
// 2953 
// 2954   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2955 
// 2956   status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
// 2957 
// 2958 #if defined ( NV_RESTORE )
// 2959   // reset the values of NV items if NV_RESTORE is not enabled
// 2960   if ((status == SUCCESS) && (setDefault == TRUE))
        ; Setup parameters for call to function osal_nv_item_init
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_0
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDSecMgrNwkKeyInit_0
// 2961   {
// 2962     // clear NV data to default values
// 2963     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 2964   }
// 2965 #else
// 2966   (void)setDefault;   // to eliminate compiler warning
// 2967 
// 2968   // reset the values of NV items if NV_RESTORE is not enabled
// 2969   if (status == SUCCESS)
// 2970   {
// 2971     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
// 2972   }
// 2973 #endif // defined (NV_RESTORE)
// 2974 
// 2975   // Initialize NV items for NWK Active and Alternate keys. These items are used
// 2976   // all the time, independently of NV_RESTORE being set or not
// 2977   osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
??ZDSecMgrNwkKeyInit_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2978 
// 2979   status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
// 2980 
// 2981 #if defined ( NV_RESTORE )
// 2982   // reset the values of NV items if NV_RESTORE is not enabled
// 2983   if ((status == SUCCESS) && (setDefault == TRUE))
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x3a
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_1
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDSecMgrNwkKeyInit_1
// 2984   {
// 2985     // clear NV data to default values
// 2986     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3a
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 2987   }
// 2988 #else
// 2989   // reset the values of NV items if NV_RESTORE is not enabled
// 2990   if (status == SUCCESS)
// 2991   {
// 2992     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 2993   }
// 2994 #endif // defined (NV_RESTORE)
// 2995 
// 2996   status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
// 2997 
// 2998 #if defined ( NV_RESTORE )
// 2999   // reset the values of NV items if NV_RESTORE is not enabled
// 3000   if ((status == SUCCESS) && (setDefault == TRUE))
??ZDSecMgrNwkKeyInit_1:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_2
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDSecMgrNwkKeyInit_2
// 3001   {
// 3002     // clear NV data to default values
// 3003     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3004   }
// 3005 #else
// 3006   // reset the values of NV items if NV_RESTORE is not enabled
// 3007   if (status == SUCCESS)
// 3008   {
// 3009     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 3010   }
// 3011 #endif // defined (NV_RESTORE)
// 3012 
// 3013 }
??ZDSecMgrNwkKeyInit_2:
          CFI EndBlock cfiBlock393
        REQUIRE ?Subroutine10
        ; // Fall through to label ?Subroutine10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiBlock394 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x26
        SJMP    ??Subroutine69_0
          CFI EndBlock cfiBlock394

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock395 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x8
          CFI EndBlock cfiBlock395
        REQUIRE ??Subroutine69_0
        ; // Fall through to label ??Subroutine69_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine69_0:
          CFI Block cfiBlock396 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock396
        REQUIRE ??Subroutine70_0
        ; // Fall through to label ??Subroutine70_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine70_0:
          CFI Block cfiBlock397 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock397
// 3014 
// 3015 /*********************************************************************
// 3016  * @fn          ZDSecMgrReadKeyFromNv
// 3017  *
// 3018  * @brief       Looks for a specific key in NV based on Index value
// 3019  *
// 3020  * @param   keyNvId - Index of key to look in NV
// 3021  *                    valid values are:
// 3022  *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
// 3023  *                    ZCD_NV_NWK_ALTERN_KEY_INFO
// 3024  *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 3025  *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 3026  *                    ZCD_NV_PRECFGKEY
// 3027  *
// 3028  * @param  *keyinfo - Data is read into this buffer.
// 3029  *
// 3030  * @return  SUCCESS if NV data was copied to the keyinfo parameter .
// 3031  *          Otherwise, NV_OPER_FAILED for failure.
// 3032  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3033 ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
ZDSecMgrReadKeyFromNv:
          CFI Block cfiBlock398 Using cfiCommon0
          CFI Function ZDSecMgrReadKeyFromNv
        CODE
// 3034 {
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3035   if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
// 3036       (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
        MOV     A,#0x3a
        XRL     A,R2
        JNZ     ??ZDSecMgrReadKeyFromNv_0
        MOV     A,R3
??ZDSecMgrReadKeyFromNv_0:
        JZ      ??ZDSecMgrReadKeyFromNv_1
        MOV     A,#0x3b
        XRL     A,R2
        ORL     A,R3
        JNZ     ??ZDSecMgrReadKeyFromNv_2
// 3037   {
// 3038     // get NWK active or alternate key from NV
// 3039     return (osal_nv_read(keyNvId,
// 3040                          osal_offsetof(nwkKeyDesc, key),
// 3041                          SEC_KEY_LEN,
// 3042                          keyinfo));
??ZDSecMgrReadKeyFromNv_1:
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x10
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x1
        SJMP    ??ZDSecMgrReadKeyFromNv_3
          CFI CFA_XSP16 add(XSP16, 10)
// 3043   }
// 3044   else if ((keyNvId >= ZCD_NV_TCLK_TABLE_START) &&
// 3045            (keyNvId < (ZCD_NV_TCLK_TABLE_START + ZDSECMGR_TC_DEVICE_MAX)))
??ZDSecMgrReadKeyFromNv_2:
        MOV     A,R2
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#-0x2
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDSecMgrReadKeyFromNv_4
// 3046   {
// 3047     // Read entry keyNvId of the TC link key table from NV. keyNvId should be
// 3048     // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 3049     return (osal_nv_read(keyNvId,
// 3050                          osal_offsetof(APSME_TCLinkKey_t, key),
// 3051                          SEC_KEY_LEN,
// 3052                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x10
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        SJMP    ??ZDSecMgrReadKeyFromNv_3
          CFI CFA_XSP16 add(XSP16, 10)
// 3053   }
// 3054   else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
// 3055            (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
??ZDSecMgrReadKeyFromNv_4:
        DEC     R1
        CLR     C
        MOV     A,R0
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_79:
        JNC     ??ZDSecMgrReadKeyFromNv_5
// 3056   {
// 3057     // Read entry keyNvId of the APS link key table from NV. keyNvId should be
// 3058     // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 3059     return (osal_nv_read(keyNvId,
// 3060                          osal_offsetof(APSME_LinkKeyData_t, key),
// 3061                          SEC_KEY_LEN,
// 3062                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x10
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
??ZDSecMgrReadKeyFromNv_3:
        MOV     R5,#0x0
        SJMP    ??ZDSecMgrReadKeyFromNv_6
          CFI CFA_XSP16 add(XSP16, 10)
// 3063   }
// 3064   else if (keyNvId == ZCD_NV_PRECFGKEY)
??ZDSecMgrReadKeyFromNv_5:
        MOV     A,#0x62
        XRL     A,R2
        ORL     A,R3
        JNZ     ??ZDSecMgrReadKeyFromNv_7
// 3065   {
// 3066     // Read entry keyNvId of the Preconfig key from NV.
// 3067     return (osal_nv_read(keyNvId,
// 3068                          0,
// 3069                          SEC_KEY_LEN,
// 3070                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x10
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x62
        MOV     R3,#0x0
??ZDSecMgrReadKeyFromNv_6:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ??ZDSecMgrReadKeyFromNv_8
// 3071   }
// 3072 
// 3073   return NV_OPER_FAILED;
??ZDSecMgrReadKeyFromNv_7:
        MOV     R1,#0xa
??ZDSecMgrReadKeyFromNv_8:
        LJMP    ??Subroutine70_0 & 0xFFFF
// 3074 }
          CFI EndBlock cfiBlock398
// 3075 
// 3076 /******************************************************************************
// 3077  * @fn          ZDSecMgrApsLinkKeyInit
// 3078  *
// 3079  * @brief       Initialize the NV table for Application link keys
// 3080  *
// 3081  * @param       none
// 3082  *
// 3083  * @return      none
// 3084  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3085 void ZDSecMgrApsLinkKeyInit(void)
ZDSecMgrApsLinkKeyInit:
          CFI Block cfiBlock399 Using cfiCommon0
          CFI Function ZDSecMgrApsLinkKeyInit
        CODE
// 3086 {
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 24
        MOV     A,#-0x18
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
// 3087   APSME_LinkKeyData_t pApsLinkKey;
// 3088   uint8 i;
// 3089   uint8 status;
// 3090 
// 3091   // Initialize all NV items for APS link key, if not exist already.
// 3092   osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3093 
// 3094   for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
// 3095   {
// 3096     status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
// 3097                                sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
??ZDSecMgrApsLinkKeyInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,#0x2
        MOV     R3,A
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
// 3098 
// 3099 #if defined ( NV_RESTORE )
// 3100     (void)status;   // to eliminate compiler warning
// 3101 #else
// 3102     // reset the values of NV items if NV_RESTORE is not enabled
// 3103     if (status == SUCCESS)
// 3104     {
// 3105       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 3106                     sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
// 3107 
// 3108     }
// 3109 #endif // defined (NV_RESTORE)
// 3110   }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDSecMgrApsLinkKeyInit_0
// 3111 }
        MOV     A,#0x18
        LJMP    ??Subroutine69_0 & 0xFFFF
          CFI EndBlock cfiBlock399
// 3112 
// 3113 /******************************************************************************
// 3114  * @fn          ZDSecMgrInitNVKeyTables
// 3115  *
// 3116  * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
// 3117  *
// 3118  * @param       setDefault - TRUE to set default values
// 3119  *
// 3120  * @return      none
// 3121  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3122 void ZDSecMgrInitNVKeyTables(uint8 setDefault)
ZDSecMgrInitNVKeyTables:
          CFI Block cfiBlock400 Using cfiCommon0
          CFI Function ZDSecMgrInitNVKeyTables
        CODE
// 3123 {
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrNwkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrApsLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, APSME_TCLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 3124   ZDSecMgrNwkKeyInit(setDefault);
        ; Setup parameters for call to function ZDSecMgrNwkKeyInit
        LCALL   `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
// 3125   ZDSecMgrApsLinkKeyInit();
        ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
        LCALL   `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
// 3126   APSME_TCLinkKeyInit(setDefault);
        ; Setup parameters for call to function APSME_TCLinkKeyInit
        MOV     A,R6
        MOV     R1,A
        LCALL   `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
// 3127 }
        LJMP    ??Subroutine63_0 & 0xFFFF
          CFI EndBlock cfiBlock400
// 3128 
// 3129 /******************************************************************************
// 3130  * @fn          ZDSecMgrSaveApsLinkKey
// 3131  *
// 3132  * @brief       Save APS Link Key to NV. It will loop through all the keys
// 3133  *              to see which one to save.
// 3134  *
// 3135  * @param       none
// 3136  *
// 3137  * @return      none
// 3138  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3139 void ZDSecMgrSaveApsLinkKey(void)
ZDSecMgrSaveApsLinkKey:
          CFI Block cfiBlock401 Using cfiCommon0
          CFI Function ZDSecMgrSaveApsLinkKey
        CODE
// 3140 {
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
// 3141   APSME_LinkKeyData_t *pKeyData = NULL;
// 3142   int i;
// 3143 
// 3144   pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V6,R2
        MOV     ?V7,R3
// 3145 
// 3146   if (pKeyData != NULL)
        MOV     A,R2
        ORL     A,?V7
        JNZ     $+5
        LJMP    ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
// 3147   {
// 3148     // checks all pending flags to know which one to save
// 3149     for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
// 3150     {
// 3151       if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
??ZDSecMgrSaveApsLinkKey_1:
        MOV     A,?V0
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,?V1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#ApsLinkKeyFrmCntr & 0xff
        ADD     A,R0
        MOV     ?V2,A
        MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V3,A
        MOV     A,?V2
        ADD     A,#0x8
        MOV     ?V4,A
        CLR     A
        ADDC    A,?V3
        MOV     ?V5,A
        MOV     DPL,?V4
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
        MOV     A,?V0
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,?V1
        ADDC    A,#0x2
        MOV     R7,A
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V8,#0x18
        MOV     ?V9,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
// 3152       {
// 3153         // retrieve key from NV
// 3154         if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
// 3155                          sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        JNZ     ??ZDSecMgrSaveApsLinkKey_2
// 3156         {
// 3157           pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?XLOAD_R0123
        MOV     A,?V6
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V7
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 3158           pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XLOAD_R0123
        MOV     A,?V6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V7
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 3159 
// 3160           // Write the APS link key back to the NV
// 3161           osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
// 3162                         sizeof(APSME_LinkKeyData_t), pKeyData);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V2,#0x18
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3163 
// 3164           // clear the pending write flag
// 3165           ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
        MOV     DPL,?V4
        MOV     DPH,?V5
        CLR     A
        MOVX    @DPTR,A
// 3166         }
// 3167       }
// 3168     }
??ZDSecMgrSaveApsLinkKey_2:
        INC     ?V0
        MOV     A,?V0
        JNZ     ??ZDSecMgrSaveApsLinkKey_3
        INC     ?V1
??ZDSecMgrSaveApsLinkKey_3:
        CLR     C
        SUBB    A,#0x3
        MOV     A,?V1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
// 3169 
// 3170     // clear copy of key in RAM
// 3171     osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3172 
// 3173     osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3174   }
// 3175 }
??ZDSecMgrSaveApsLinkKey_0:
        LJMP    ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock401
// 3176 
// 3177 /******************************************************************************
// 3178  * @fn          ZDSecMgrSaveTCLinkKey
// 3179  *
// 3180  * @brief       Save TC Link Key to NV. It will loop through all the keys
// 3181  *              to see which one to save.
// 3182  *
// 3183  * @param       none
// 3184  *
// 3185  * @return      none
// 3186  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3187 void ZDSecMgrSaveTCLinkKey(void)
ZDSecMgrSaveTCLinkKey:
          CFI Block cfiBlock402 Using cfiCommon0
          CFI Function ZDSecMgrSaveTCLinkKey
        CODE
// 3188 {
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3189   APSME_TCLinkKey_t *pKeyData = NULL;
// 3190   uint16 i;
// 3191 
// 3192   pKeyData = (APSME_TCLinkKey_t *)osal_mem_alloc(sizeof(APSME_TCLinkKey_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x20
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
// 3193 
// 3194   if (pKeyData != NULL)
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
// 3195   {
// 3196     for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3197     {
// 3198       if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
        MOV     DPTR,#TCLinkKeyFrmCntr + 8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrSaveTCLinkKey_1
// 3199       {
// 3200         if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
// 3201                          sizeof(APSME_TCLinkKey_t), pKeyData) == SUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V2,#0x20
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        JNZ     ??ZDSecMgrSaveTCLinkKey_1
// 3202         {
// 3203           pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr
        LCALL   ?XLOAD_R0123
        MOV     A,?V0
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 3204           pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        LCALL   ?XLOAD_R0123
        MOV     A,?V0
        ADD     A,#0x1c
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 3205 
// 3206           // Write the TC link key back to the NV
// 3207           osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
// 3208                         sizeof(APSME_TCLinkKey_t), pKeyData);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 3209 
// 3210           // clear the pending write flag
// 3211           TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
        MOV     DPTR,#TCLinkKeyFrmCntr + 8
        CLR     A
        MOVX    @DPTR,A
// 3212         }
// 3213       }
// 3214     }
// 3215       // clear copy of key in RAM
// 3216     osal_memset( pKeyData, 0x00, sizeof(APSME_TCLinkKey_t) );
??ZDSecMgrSaveTCLinkKey_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3217 
// 3218     osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3219   }
// 3220 }
??ZDSecMgrSaveTCLinkKey_0:
        LJMP    ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock402
// 3221 
// 3222 /******************************************************************************
// 3223  * @fn          ZDSecMgrUpdateTCAddress
// 3224  *
// 3225  * @brief       Update Trust Center address and save to NV.
// 3226  *
// 3227  * @param       extAddr - [in] extended address or NULL if no TC protected
// 3228  *
// 3229  * @return      none
// 3230  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3231 void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
ZDSecMgrUpdateTCAddress:
          CFI Block cfiBlock403 Using cfiCommon0
          CFI Function ZDSecMgrUpdateTCAddress
        CODE
// 3232 {
        FUNCALL ZDSecMgrUpdateTCAddress, APSME_SetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateTCAddress, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3233   uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
        MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 3234   APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
        MOV     A,R2
        ORL     A,R3
        JNZ     ??ZDSecMgrUpdateTCAddress_0
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R2,?V0
        MOV     R3,?V1
??ZDSecMgrUpdateTCAddress_0:
        ; Setup parameters for call to function APSME_SetRequest
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x55
        LCALL   `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
// 3235 #if defined ( NV_RESTORE )
// 3236   osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#zgApsTrustCenterAddr & 0xff
        MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x71
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3237 #endif
// 3238 }
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock403
// 3239 
// 3240 #if defined ( ZBA_FALLBACK_NWKKEY )
// 3241 /******************************************************************************
// 3242  * @fn          ZDSecMgrFallbackNwkKey
// 3243  *
// 3244  * @brief       Use the ZBA fallback network key.
// 3245  *
// 3246  * @param       none
// 3247  *
// 3248  * @return      none
// 3249  */
// 3250 void ZDSecMgrFallbackNwkKey( void )
// 3251 {
// 3252   if ( !_NIB.nwkKeyLoaded )
// 3253   {
// 3254     uint8 fallbackKey[SEC_KEY_LEN];
// 3255 
// 3256     ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
// 3257     SSP_UpdateNwkKey( fallbackKey, 0);
// 3258     SSP_SwitchNwkKey( 0 );
// 3259 
// 3260     // clear local copy of key
// 3261     osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
// 3262 
// 3263     // handle next step in authentication process
// 3264     ZDSecMgrAuthNwkKey();
// 3265   }
// 3266 }
// 3267 #endif // defined ( ZBA_FALLBACK_NWKKEY )
// 3268 
// 3269 #if defined ( NV_RESTORE )
// 3270 /******************************************************************************
// 3271  * @fn          ZDSecMgrClearNVKeyValues
// 3272  *
// 3273  * @brief       If NV_RESTORE is enabled and the status of the network needs
// 3274  *              default values this fuction clears ZCD_NV_NWKKEY,
// 3275  *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
// 3276  *
// 3277  * @param       none
// 3278  *
// 3279  * @return      none
// 3280  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3281 void ZDSecMgrClearNVKeyValues(void)
ZDSecMgrClearNVKeyValues:
          CFI Block cfiBlock404 Using cfiCommon0
          CFI Function ZDSecMgrClearNVKeyValues
        CODE
// 3282 {
        FUNCALL ZDSecMgrClearNVKeyValues, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 38
        MOV     A,#-0x26
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3283   nwkActiveKeyItems keyItems;
// 3284   nwkKeyDesc nwkKey;
// 3285 
// 3286   osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3287 
// 3288   osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3289 
// 3290   // Initialize NV items for NWK Active and Alternate keys.
// 3291   osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3292 
// 3293   osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3a
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3294 
// 3295   osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3296 }
        LJMP    ?Subroutine10 & 0xFFFF
          CFI EndBlock cfiBlock404

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDSecMgrAppKeyType>`:
        DATA8
        DB 3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAddrStore::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrExtAddrStore::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrExtAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrExtAddrLookup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrExtAddrLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAddrClear::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAddrClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupAMI::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupAMI

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupExt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupExtGetIndex::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupExtGetIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupAMIGetIndex::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupAMIGetIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryFree::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppKeyGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppKeyReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppKeyReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSendNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSendNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceRemoveByExtAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceRemoveByExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceRemove::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceValidateRM::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceValidateRM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceValidate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceValidate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceJoinDirect::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceJoinDirect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceJoinFwd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceJoinFwd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAssocDeviceAuth::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAssocDeviceAuth

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAuthNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAuthNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrConfig::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrPermitJoining::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrPermitJoining

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrPermitJoiningTimeout::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrPermitJoiningTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrNewDeviceEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrNewDeviceEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTCExtAddrCheck::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTCExtAddrCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTCDataLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTCDataLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTransportKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTransportKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrUpdateDeviceInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrUpdateDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRemoveDeviceInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRemoveDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRequestKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRequestKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSwitchKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSwitchKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrUpdateNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrUpdateNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSwitchNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSwitchNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRequestAppKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRequestAppKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppKeyTypeSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppKeyTypeSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_LinkKeySet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_LinkKeySet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAuthenticationSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAuthenticationSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAuthenticationCheck::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAuthenticationCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_LinkKeyNVIdGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_LinkKeyNVIdGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_IsLinkKeyValid::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_IsLinkKeyValid

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_KeyFwdToChild::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_KeyFwdToChild

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAddLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAddLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrInitNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrWriteNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrWriteNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRestoreFromNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSetDefaultNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAPSRemove::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAPSRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_TCLinkKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_TCLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_TCLinkKeySync::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_TCLinkKeySync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_TCLinkKeyLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_TCLinkKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_IsDefaultTCLK::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_IsDefaultTCLK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrNwkKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrNwkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrReadKeyFromNv::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrReadKeyFromNv

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrApsLinkKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrApsLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrInitNVKeyTables::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrInitNVKeyTables

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSaveApsLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSaveApsLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSaveTCLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSaveTCLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrUpdateTCAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrUpdateTCAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrClearNVKeyValues::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrClearNVKeyValues

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e9:
        DD 1001

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_b:
        DD 11

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_a:
        DD 10

        END
// 3297 #endif // defined ( NV_RESTORE )
// 3298 
// 3299 /******************************************************************************
// 3300 ******************************************************************************/
// 
// 8 479 bytes in segment BANKED_CODE
//   390 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    24 bytes in segment XDATA_ROM_C
//    81 bytes in segment XDATA_Z
// 
// 8 870 bytes of CODE  memory
//     8 bytes of CONST memory (+ 16 bytes shared)
//    82 bytes of XDATA memory
//
//Errors: none
//Warnings: none
